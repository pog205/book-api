package org.datn.bookstation.dto.request;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Min;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class BookStatsFilterRequest {
    
    // üìÖ TH·ªúI GIAN
    private Long startDate;                     // Timestamp b·∫Øt ƒë·∫ßu
    private Long endDate;                       // Timestamp k·∫øt th√∫c
    
    @Pattern(regexp = "DAILY|WEEKLY|MONTHLY|QUARTERLY|YEARLY", message = "Period type must be DAILY, WEEKLY, MONTHLY, QUARTERLY, or YEARLY")
    private String periodType;                  // Lo·∫°i k·ª≥ th·ªëng k√™
    
    // üéØ L·ªåC THEO THU·ªòC T√çNH
    private Integer categoryId;                 // L·ªçc theo danh m·ª•c
    private Integer authorId;                   // L·ªçc theo t√°c gi·∫£
    private Integer publisherId;                // L·ªçc theo nh√† xu·∫•t b·∫£n
    private Integer supplierId;                 // L·ªçc theo nh√† cung c·∫•p
    
    // üí∞ L·ªåC THEO GI√Å
    private java.math.BigDecimal minPrice;      // Gi√° t·ªëi thi·ªÉu
    private java.math.BigDecimal maxPrice;      // Gi√° t·ªëi ƒëa
    
    // üìä L·ªåC THEO HI·ªÜU SU·∫§T
    @Pattern(regexp = "ALL|TOP_PERFORMERS|AVERAGE_PERFORMERS|POOR_PERFORMERS|RISING_STARS|DECLINING", 
             message = "Performance level must be valid")
    private String performanceLevel;            // M·ª©c ƒë·ªô hi·ªáu su·∫•t
    
    @Pattern(regexp = "ALL|IN_STOCK|LOW_STOCK|OUT_OF_STOCK|OVERSTOCKED", 
             message = "Stock status must be valid")
    private String stockStatus;                 // Tr·∫°ng th√°i kho
    
    // üîç L·ªåC N√ÇNG CAO
    private Boolean hasDiscount;                // C√≥ gi·∫£m gi√° kh√¥ng
    private Boolean inFlashSale;                // C√≥ trong flash sale kh√¥ng
    private Boolean hasReviews;                 // C√≥ ƒë√°nh gi√° kh√¥ng
    private Double minRating;                   // ƒê√°nh gi√° t·ªëi thi·ªÉu
    
    // üìà S·∫ÆP X·∫æP & PH√ÇN TRANG
    @Pattern(regexp = "revenue|sales|rating|stock|name|date", message = "Sort by must be valid field")
    @Builder.Default
    private String sortBy = "revenue";          // S·∫Øp x·∫øp theo
    
    @Pattern(regexp = "ASC|DESC", message = "Sort direction must be ASC or DESC")
    @Builder.Default
    private String sortDirection = "DESC";      // H∆∞·ªõng s·∫Øp x·∫øp
    
    @Min(value = 0, message = "Page must be non-negative")
    @Builder.Default
    private Integer page = 0;                   // Trang hi·ªán t·∫°i
    
    @Min(value = 1, message = "Size must be positive")
    @Builder.Default
    private Integer size = 10;                  // K√≠ch th∆∞·ªõc trang
    
    // üéØ T√ôYCH·ªåN PH√ÇN T√çCH
    private Boolean includeProjections;         // Bao g·ªìm d·ª± b√°o
    private Boolean includeComparisons;         // Bao g·ªìm so s√°nh
    private Boolean includeInsights;            // Bao g·ªìm insights
    private Boolean includeRecommendations;     // Bao g·ªìm khuy·∫øn ngh·ªã
}
