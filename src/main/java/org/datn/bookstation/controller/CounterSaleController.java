package org.datn.bookstation.controller;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.datn.bookstation.dto.request.CounterSaleRequest;
import org.datn.bookstation.dto.response.ApiResponse;
import org.datn.bookstation.dto.response.CounterSaleResponse;
import org.datn.bookstation.dto.response.OrderResponse;
import org.datn.bookstation.service.CounterSaleService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

/**
 * ‚úÖ Controller cho b√°n h√†ng t·∫°i qu·∫ßy (Counter Sales)
 * 
 * T√≠nh nƒÉng:
 * 1. T·∫°o ƒë∆°n h√†ng t·∫°i qu·∫ßy (kh√¥ng c·∫ßn ƒë·ªãa ch·ªâ, c√≥ th·ªÉ kh√¥ng c·∫ßn t√†i kho·∫£n)
 * 2. H·ªßy ƒë∆°n h√†ng t·∫°i qu·∫ßy 
 * 3. Xem chi ti·∫øt ƒë∆°n h√†ng t·∫°i qu·∫ßy
 * 4. T√≠nh to√°n gi√° t·∫°i qu·∫ßy (preview)
 * 
 * ƒê·∫∑c ƒëi·ªÉm:
 * - OrderType = "COUNTER"
 * - Kh√¥ng c·∫ßn userId (c√≥ th·ªÉ b√°n cho kh√°ch v√£ng lai)
 * - Ch·ªâ c·∫ßn customerName + customerPhone
 * - Kh√¥ng c·∫ßn addressId (b√°n t·∫°i qu·∫ßy)
 * - V·∫´n √°p d·ª•ng voucher, flash sale nh∆∞ b√¨nh th∆∞·ªùng
 * - Thanh to√°n ngay t·∫°i qu·∫ßy (CASH/CARD/BANK_TRANSFER)
 * - Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: DELIVERED (ƒë√£ thanh to√°n v√† nh·∫≠n h√†ng ngay)
 */
@RestController
@AllArgsConstructor
@RequestMapping("/api/counter-sales")
@Slf4j
public class CounterSaleController {
    
    private final CounterSaleService counterSaleService;
    
    /**
     * üî• API t·∫°o ƒë∆°n h√†ng t·∫°i qu·∫ßy
     * POST /api/counter-sales
     * 
     * Lu·ªìng:
     * 1. Validate s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng, gi√°
     * 2. √Åp d·ª•ng voucher n·∫øu c√≥
     * 3. T·∫°o ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i DELIVERED
     * 4. Tr·ª´ stock, c·ªông sold count ngay l·∫≠p t·ª©c
     * 5. Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng
     */
    @PostMapping
    public ResponseEntity<ApiResponse<CounterSaleResponse>> createCounterSale(
            @Valid @RequestBody CounterSaleRequest request) {
        
        log.info("üéØ Counter-sales endpoint hit with request: {}", request.getCustomerName());
        
        ApiResponse<CounterSaleResponse> response = counterSaleService.createCounterSale(request);
        
        log.info("üéØ Counter-sales service returned status: {}", response.getStatus());
        
        HttpStatus status = response.getStatus() == 200 ? HttpStatus.CREATED :
                           response.getStatus() == 400 ? HttpStatus.BAD_REQUEST :
                           response.getStatus() == 404 ? HttpStatus.NOT_FOUND :
                           HttpStatus.INTERNAL_SERVER_ERROR;
        
        return ResponseEntity.status(status).body(response);
    }
    
    /**
     * üî• API t√≠nh to√°n gi√° t·∫°i qu·∫ßy (preview)
     * POST /api/counter-sales/calculate
     * 
     * T√≠nh to√°n tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng th·ª±c s·ª±
     */
    @PostMapping("/calculate")
    public ResponseEntity<ApiResponse<CounterSaleResponse>> calculateCounterSale(
            @Valid @RequestBody CounterSaleRequest request) {
        
        ApiResponse<CounterSaleResponse> response = counterSaleService.calculateCounterSale(request);
        
        HttpStatus status = response.getStatus() == 200 ? HttpStatus.OK :
                           response.getStatus() == 400 ? HttpStatus.BAD_REQUEST :
                           response.getStatus() == 404 ? HttpStatus.NOT_FOUND :
                           HttpStatus.INTERNAL_SERVER_ERROR;
        
        return ResponseEntity.status(status).body(response);
    }
    
    /**
     * üî• API xem chi ti·∫øt ƒë∆°n h√†ng t·∫°i qu·∫ßy
     * GET /api/counter-sales/{orderId}
     */
    @GetMapping("/{orderId}")
    public ResponseEntity<ApiResponse<OrderResponse>> getCounterSaleDetails(
            @PathVariable Integer orderId) {
        
        ApiResponse<OrderResponse> response = counterSaleService.getCounterSaleDetails(orderId);
        
        HttpStatus status = response.getStatus() == 200 ? HttpStatus.OK :
                           response.getStatus() == 404 ? HttpStatus.NOT_FOUND :
                           HttpStatus.INTERNAL_SERVER_ERROR;
        
        return ResponseEntity.status(status).body(response);
    }
    
    /**
     * üî• API h·ªßy ƒë∆°n h√†ng t·∫°i qu·∫ßy
     * PATCH /api/counter-sales/{orderId}/cancel
     * 
     * Ch·ªâ c√≥ th·ªÉ h·ªßy trong v√≤ng 24h sau khi t·∫°o
     * S·∫Ω ho√†n stock v·ªÅ kho
     */
    @PatchMapping("/{orderId}/cancel")
    public ResponseEntity<ApiResponse<OrderResponse>> cancelCounterSale(
            @PathVariable Integer orderId,
            @RequestParam Integer staffId,
            @RequestParam(required = false) String reason) {
        
        ApiResponse<OrderResponse> response = counterSaleService.cancelCounterSale(orderId, staffId, reason);
        
        HttpStatus status = response.getStatus() == 200 ? HttpStatus.OK :
                           response.getStatus() == 400 ? HttpStatus.BAD_REQUEST :
                           response.getStatus() == 404 ? HttpStatus.NOT_FOUND :
                           HttpStatus.INTERNAL_SERVER_ERROR;
        
        return ResponseEntity.status(status).body(response);
    }
}
