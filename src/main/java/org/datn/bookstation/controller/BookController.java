package org.datn.bookstation.controller;

import lombok.AllArgsConstructor;
import org.datn.bookstation.dto.request.BookCategoryRequest;
import org.datn.bookstation.dto.request.BookRequest;
import org.datn.bookstation.dto.request.FlashSaleItemBookRequest;
import org.datn.bookstation.dto.request.TrendingRequest;
import org.datn.bookstation.dto.request.QuantityValidationRequest;
import org.datn.bookstation.dto.request.*;
import org.datn.bookstation.dto.request.BookPriceCalculationRequest;
import org.datn.bookstation.dto.response.ApiResponse;
import org.datn.bookstation.dto.response.BookDetailResponse;
import org.datn.bookstation.dto.response.BookResponse;
import org.datn.bookstation.dto.response.BookSentimentResponse;
import org.datn.bookstation.dto.response.PaginationResponse;
import org.datn.bookstation.dto.response.DropdownOptionResponse;
import org.datn.bookstation.dto.response.TrendingBookResponse;
import org.datn.bookstation.dto.response.QuantityValidationResponse;
import org.datn.bookstation.dto.response.BookPriceCalculationResponse;
import org.datn.bookstation.dto.response.ProcessingOrderResponse;
import org.datn.bookstation.dto.response.BookStatsOverviewResponse;
import org.datn.bookstation.dto.response.BookComparisonResponse;
import org.datn.bookstation.entity.Book;
import org.datn.bookstation.entity.FlashSaleItem;
import org.datn.bookstation.mapper.BookResponseMapper;
import org.datn.bookstation.mapper.BookDetailResponseMapper;
import org.datn.bookstation.service.BookService;
import org.datn.bookstation.service.TrendingCacheService;
import org.datn.bookstation.service.FlashSaleItemService;
import org.datn.bookstation.repository.FlashSaleItemRepository;
import org.datn.bookstation.repository.OrderDetailRepository;
import org.datn.bookstation.repository.ReviewRepository;
import org.datn.bookstation.util.DateTimeUtil;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Arrays;
import org.datn.bookstation.dto.response.PosBookItemResponse;

@RestController
@AllArgsConstructor
@RequestMapping("/api/books")
public class BookController {

    private final BookService bookService;
    private final BookResponseMapper bookResponseMapper;
    private final BookDetailResponseMapper bookDetailResponseMapper;
    private final TrendingCacheService trendingCacheService;
    private final FlashSaleItemService flashSaleItemService;
    private final FlashSaleItemRepository flashSaleItemRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final org.datn.bookstation.service.BookProcessingQuantityService bookProcessingQuantityService;

    @GetMapping
    public ResponseEntity<ApiResponse<PaginationResponse<BookResponse>>> getAll(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "5") int size,
            @RequestParam(required = false) String bookName,
            @RequestParam(required = false) Integer categoryId,
            @RequestParam(required = false) Integer supplierId,
            @RequestParam(required = false) Integer publisherId,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice,
            @RequestParam(required = false) Byte status,
            @RequestParam(required = false) String bookCode) {

        PaginationResponse<BookResponse> books = bookService.getAllWithPagination(
                page, size, bookName, categoryId, supplierId, publisherId, minPrice, maxPrice, status, bookCode);
        ApiResponse<PaginationResponse<BookResponse>> response = new ApiResponse<>(HttpStatus.OK.value(), "Th√†nh c√¥ng",
                books);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/client")
    public ResponseEntity<ApiResponse<PaginationResponse<FlashSaleItemBookRequest>>> getAllClient(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(required = false) String bookName,
            @RequestParam(required = false) Integer parentCategoryId,
            @RequestParam(required = false) Integer categoryId,
            @RequestParam(required = false) String authorIds, // nh·∫≠n d·∫°ng chu·ªói "1,2,3"
            @RequestParam(required = false) Integer publisherId,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice) {

        List<Integer> authorIdList = new ArrayList<>();
        if (authorIds != null && !authorIds.isEmpty()) {
            authorIdList = Arrays.stream(authorIds.split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }

        PaginationResponse<FlashSaleItemBookRequest> books = bookService.getAllWithPagination(
                page, size, bookName, parentCategoryId, categoryId, authorIdList, publisherId, minPrice, maxPrice);
        ApiResponse<PaginationResponse<FlashSaleItemBookRequest>> response = new ApiResponse<>(HttpStatus.OK.value(),
                "Th√†nh c√¥ng", books);
        return ResponseEntity.ok(response);
    }

    /**
     * üî• API l·∫•y danh s√°ch s·∫£n ph·∫©m xu h∆∞·ªõng (POST)
     * H·ªó tr·ª£ 2 lo·∫°i: DAILY_TRENDING v√† HOT_DISCOUNT
     * T·∫•t c·∫£ parameters g·ª≠i trong request body ƒë·ªÉ URL clean v√† d·ªÖ qu·∫£n l√Ω
     */
    @PostMapping("/trending")
    public ResponseEntity<ApiResponse<PaginationResponse<TrendingBookResponse>>> getTrendingBooks(
            @Valid @RequestBody TrendingRequest request) {
        // B·ªè to√†n b·ªô filter, ch·ªâ gi·ªØ l·∫°i type, page, size
        TrendingRequest cleanRequest = new TrendingRequest();
        cleanRequest.setType(request.getType());
        cleanRequest.setPage(request.getPage());
        cleanRequest.setSize(request.getSize());
        // C√°c tr∆∞·ªùng filter kh√°c s·∫Ω b·ªã b·ªè qua

        PaginationResponse<TrendingBookResponse> trendingBooks = bookService.getTrendingBooks(cleanRequest);

        // üî• REAL FIX: Thay v√¨ d√πng repository query SAI, d√πng Book.soldCount t·ª´
        // database nh∆∞ /api/books
        System.out.println("üî• REAL FIX: Using Book.soldCount from database instead of repository query");
        if (trendingBooks != null && trendingBooks.getContent() != null) {
            for (TrendingBookResponse book : trendingBooks.getContent()) {
                // L·∫•y Book entity tr·ª±c ti·∫øp t·ª´ database ƒë·ªÉ c√≥ soldCount ƒë√∫ng
                try {
                    Book bookEntity = bookService.getById(book.getId());
                    if (bookEntity != null && bookEntity.getSoldCount() != null) {
                        int dbSoldCount = bookEntity.getSoldCount();
                        int currentSoldCount = book.getSoldCount();

                        if (currentSoldCount != dbSoldCount) {
                            System.out.println("üî• REAL FIX - Book ID " + book.getId() +
                                    ": " + currentSoldCount + " ‚Üí " + dbSoldCount + " (from Book.soldCount)");
                            book.setSoldCount(dbSoldCount);
                            book.setOrderCount(dbSoldCount);
                        }
                    }
                } catch (Exception e) {
                    System.err.println("Error getting Book entity for ID " + book.getId() + ": " + e.getMessage());
                }
            }
        }

        String message = cleanRequest.isDailyTrending() ? "L·∫•y danh s√°ch s·∫£n ph·∫©m xu h∆∞·ªõng theo ng√†y th√†nh c√¥ng"
                : "L·∫•y danh s√°ch s√°ch hot gi·∫£m s·ªëc th√†nh c√¥ng";
        ApiResponse<PaginationResponse<TrendingBookResponse>> response = new ApiResponse<>(HttpStatus.OK.value(),
                message, trendingBooks);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<BookDetailResponse>> getById(@PathVariable Integer id) {
        Book book = bookService.getById(id);
        if (book == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(404, "Kh√¥ng t√¨m th·∫•y s√°ch", null));
        }

        BookDetailResponse bookDetailResponse = bookDetailResponseMapper.toDetailResponse(book);
        return ResponseEntity.ok(new ApiResponse<>(200, "Th√†nh c√¥ng", bookDetailResponse));
    }

    @PostMapping
    public ResponseEntity<ApiResponse<BookResponse>> add(@Valid @RequestBody BookRequest bookRequest) {
        ApiResponse<Book> response = bookService.add(bookRequest);
        if (response.getStatus() == 404) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(404, response.getMessage(), null));
        }
        if (response.getStatus() == 400) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(400, response.getMessage(), null));
        }

        BookResponse bookResponse = bookResponseMapper.toResponse(response.getData());
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(new ApiResponse<>(201, "T·∫°o s√°ch th√†nh c√¥ng", bookResponse));
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<BookResponse>> update(@PathVariable Integer id,
            @Valid @RequestBody BookRequest bookRequest) {
        ApiResponse<Book> response = bookService.update(bookRequest, id);
        if (response.getStatus() == 404) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(404, response.getMessage(), null));
        }
        if (response.getStatus() == 400) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(400, response.getMessage(), null));
        }

        BookResponse bookResponse = bookResponseMapper.toResponse(response.getData());
        return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng", bookResponse));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        bookService.delete(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/toggle-status")
    public ResponseEntity<ApiResponse<BookResponse>> toggleStatus(@PathVariable Integer id) {
        ApiResponse<Book> response = bookService.toggleStatus(id);
        if (response.getStatus() == 404) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(404, "Kh√¥ng t√¨m th·∫•y s√°ch", null));
        }

        BookResponse bookResponse = bookResponseMapper.toResponse(response.getData());
        return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", bookResponse));
    }

    @GetMapping("/dropdown")
    public ResponseEntity<ApiResponse<List<DropdownOptionResponse>>> getDropdownBooks(
            @RequestParam(required = false) String search) {
        // Logic l·∫•y danh s√°ch dropdown ƒë√£ chuy·ªÉn sang service v·ªõi h·ªó tr·ª£ t√¨m ki·∫øm
        List<DropdownOptionResponse> dropdown = bookService.getDropdownOptionsWithDetails(search);
        ApiResponse<List<DropdownOptionResponse>> response = new ApiResponse<>(HttpStatus.OK.value(),
                "L·∫•y danh s√°ch s√°ch th√†nh c√¥ng", dropdown);
        return ResponseEntity.ok(response);
    }

    /**
     * API validate s·ªë l∆∞·ª£ng s·∫£n ph·∫©m khi ƒë·∫∑t h√†ng
     * POST /api/books/validate-quantity
     * ƒê√£ c·∫£i ti·∫øn ƒë·ªÉ h·ªó tr·ª£ validate flash sale items
     */
    @PostMapping("/validate-quantity")
    public ResponseEntity<ApiResponse<QuantityValidationResponse>> validateQuantity(
            @Valid @RequestBody QuantityValidationRequest request) {

        Book book = bookService.getById(request.getBookId());
        if (book == null) {
            QuantityValidationResponse response = QuantityValidationResponse
                    .failure("Kh√¥ng t√¨m th·∫•y s√°ch", 0);
            return ResponseEntity.ok(new ApiResponse<>(200, "Validate th·∫•t b·∫°i", response));
        }

        // Ki·ªÉm tra xem s√°ch c√≥ ƒëang trong flash sale kh√¥ng
        FlashSaleItem activeFlashSale = flashSaleItemRepository.findActiveFlashSaleByBook(book.getId());

        if (activeFlashSale != null) {
            // N·∫øu l√† flash sale, validate theo flash sale stock v√† gi·ªõi h·∫°n mua
            int flashSaleStock = activeFlashSale.getStockQuantity();
            Integer maxPurchasePerUser = activeFlashSale.getMaxPurchasePerUser();

            // Validate s·ªë l∆∞·ª£ng kh√¥ng v∆∞·ª£t qu√° stock flash sale
            if (request.getQuantity() > flashSaleStock) {
                QuantityValidationResponse response = QuantityValidationResponse.flashSaleFailure(
                        "Flash sale ch·ªâ c√≤n " + flashSaleStock + " s·∫£n ph·∫©m",
                        book.getStockQuantity(), flashSaleStock, maxPurchasePerUser);
                return ResponseEntity.ok(new ApiResponse<>(200, "Validate flash sale th·∫•t b·∫°i", response));
            }

            // Validate gi·ªõi h·∫°n mua per user (n·∫øu c√≥)
            if (maxPurchasePerUser != null && request.getQuantity() > maxPurchasePerUser) {
                QuantityValidationResponse response = QuantityValidationResponse.flashSaleFailure(
                        "M·ªói kh√°ch h√†ng ch·ªâ ƒë∆∞·ª£c mua t·ªëi ƒëa " + maxPurchasePerUser + " s·∫£n ph·∫©m flash sale",
                        book.getStockQuantity(), flashSaleStock, maxPurchasePerUser);
                return ResponseEntity.ok(new ApiResponse<>(200, "Validate gi·ªõi h·∫°n mua th·∫•t b·∫°i", response));
            }

            // Flash sale th√†nh c√¥ng
            QuantityValidationResponse response = QuantityValidationResponse.flashSaleSuccess(
                    book.getStockQuantity(), flashSaleStock, maxPurchasePerUser);
            response.setMessage("C√≥ th·ªÉ mua " + request.getQuantity() + " s·∫£n ph·∫©m v·ªõi gi√° flash sale");
            return ResponseEntity.ok(new ApiResponse<>(200, "Validate flash sale th√†nh c√¥ng", response));

        } else {
            // Kh√¥ng ph·∫£i flash sale, validate theo stock th√¥ng th∆∞·ªùng
            int availableQuantity = book.getStockQuantity();
            boolean isValid = request.getQuantity() > 0 && request.getQuantity() <= availableQuantity;

            QuantityValidationResponse response = isValid
                    ? QuantityValidationResponse.success(availableQuantity)
                    : QuantityValidationResponse.failure(
                            "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá, t·ªìn kho hi·ªán t·∫°i: " + availableQuantity,
                            availableQuantity);

            return ResponseEntity.ok(new ApiResponse<>(200, "Validate th√†nh c√¥ng", response));
        }
    }

    @GetMapping("/category/{categoryId}")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getBooksByCategory(@PathVariable Integer categoryId) {
        List<Book> books = bookService.getBooksByCategory(categoryId);
        List<BookResponse> bookResponses = books.stream()
                .map(bookResponseMapper::toResponse)
                .collect(Collectors.toList());
        ApiResponse<List<BookResponse>> response = new ApiResponse<>(HttpStatus.OK.value(), "Th√†nh c√¥ng",
                bookResponses);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/supplier/{supplierId}")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getBooksBySupplier(@PathVariable Integer supplierId) {
        List<Book> books = bookService.getBooksBySupplier(supplierId);
        List<BookResponse> bookResponses = books.stream()
                .map(bookResponseMapper::toResponse)
                .collect(Collectors.toList());
        ApiResponse<List<BookResponse>> response = new ApiResponse<>(HttpStatus.OK.value(), "Th√†nh c√¥ng",
                bookResponses);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/active")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getActiveBooks() {
        List<Book> books = bookService.getActiveBooks();
        List<BookResponse> bookResponses = books.stream()
                .map(bookResponseMapper::toResponse)
                .collect(Collectors.toList());
        ApiResponse<List<BookResponse>> response = new ApiResponse<>(HttpStatus.OK.value(), "Th√†nh c√¥ng",
                bookResponses);
        return ResponseEntity.ok(response);
    }

    /**
     * Test endpoint ƒë·ªÉ ki·ªÉm tra vi·ªác convert publicationDate
     * GET /api/books/test-publication-date
     */
    @GetMapping("/test-publication-date")
    public ResponseEntity<ApiResponse<Map<String, Object>>> testPublicationDate() {
        Map<String, Object> testData = new HashMap<>();

        // Test convert t·ª´ LocalDate sang timestamp
        LocalDate testDate = LocalDate.of(2010, 1, 1);
        Long timestamp = DateTimeUtil.dateToTimestamp(testDate);

        // Test convert t·ª´ timestamp v·ªÅ LocalDate
        LocalDate convertedBack = DateTimeUtil.timestampToDate(timestamp);

        testData.put("originalDate", testDate.toString());
        testData.put("timestamp", timestamp);
        testData.put("convertedBack", convertedBack.toString());
        testData.put("isEqual", testDate.equals(convertedBack));
        testData.put("currentTimestamp", DateTimeUtil.nowTimestamp());

        ApiResponse<Map<String, Object>> response = new ApiResponse<>(HttpStatus.OK.value(),
                "Test publicationDate conversion th√†nh c√¥ng", testData);
        return ResponseEntity.ok(response);
    }

    /**
     * üî• ADMIN: Cache management endpoints
     */
    @GetMapping("/admin/cache/trending/stats")
    public ResponseEntity<ApiResponse<String>> getTrendingCacheStats() {
        String stats = trendingCacheService.getCacheStatistics();
        ApiResponse<String> response = new ApiResponse<>(HttpStatus.OK.value(), "Cache statistics", stats);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/admin/cache/trending/invalidate")
    public ResponseEntity<ApiResponse<String>> invalidateTrendingCache() {
        trendingCacheService.invalidateAllTrendingCache();
        ApiResponse<String> response = new ApiResponse<>(HttpStatus.OK.value(), "Cache invalidated successfully",
                "All trending cache has been cleared");
        return ResponseEntity.ok(response);
    }

    @GetMapping("/bycategoryid/{id}")
    public ResponseEntity<ApiResponse<List<BookCategoryRequest>>> bookByCategoryId(
            @PathVariable("id") Integer id,
            @RequestParam(name = "text", required = false) String text) {
        if (id == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(bookService.getBooksByCategoryId(id, text));
    }

    @GetMapping("/flashsale/books")
    public ResponseEntity<ApiResponse<List<FlashSaleItemBookRequest>>> findAllBooksInActiveFlashSale() {
        return ResponseEntity.ok(flashSaleItemService.findAllBooksInActiveFlashSale());
    }

    @GetMapping("/searchbook")
    public ResponseEntity<ApiResponse<List<FlashSaleItemBookRequest>>> findAllBooksByName(
            @RequestParam(name = "text", required = false) String text) {
        return ResponseEntity.ok(bookService.getBookByName(text));
    }

    /**
     * üî• API t√≠nh gi√° s√°ch cho Frontend
     * POST /api/books/calculate-price
     */
    @PostMapping("/calculate-price")
    public ResponseEntity<ApiResponse<BookPriceCalculationResponse>> calculateBookPrice(
            @Valid @RequestBody BookPriceCalculationRequest request) {

        Book book = bookService.getById(request.getBookId());
        if (book == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(404, "Kh√¥ng t√¨m th·∫•y s√°ch", null));
        }

        BookPriceCalculationResponse response = bookService.calculateBookPrice(book, request);
        return ResponseEntity.ok(new ApiResponse<>(200, "T√≠nh gi√° th√†nh c√¥ng", response));
    }

    @GetMapping("/active-with-stock")
    public ResponseEntity<ApiResponse<List<BookFlashSalesRequest>>> getActiveBooksWithStock() {

        ApiResponse<List<BookFlashSalesRequest>> response = bookService.findActiveBooksWithStock();

        if (response.getStatus() == 500) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(500, response.getMessage(), null));
        }

        return ResponseEntity.ok(response);
    }

    @GetMapping("/active-for-edit")
    public ResponseEntity<ApiResponse<List<BookFlashSalesRequest>>> getActiveBooksForEdit() {

        ApiResponse<List<BookFlashSalesRequest>> response = bookService.findActiveBooksForEdit();

        if (response.getStatus() == 500) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(500, response.getMessage(), null));
        }

        return ResponseEntity.ok(response);
    }

    /**
     * ‚úÖ TH√äM M·ªöI: API l·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω theo bookId
     * M·ª•c ƒë√≠ch: Frontend xem s√°ch v√† th·∫•y processingQuantity, mu·ªën bi·∫øt chi ti·∫øt nh·ªØng ƒë∆°n n√†o ƒëang x·ª≠ l√Ω
     * GET /api/books/{bookId}/processing-orders
     * 
     * @param bookId ID c·ªßa s√°ch c·∫ßn xem
     * @return Danh s√°ch c√°c ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω s√°ch n√†y v·ªõi th√¥ng tin chi ti·∫øt
     */
    @GetMapping("/{bookId}/processing-orders")
    public ResponseEntity<ApiResponse<List<ProcessingOrderResponse>>> getProcessingOrdersByBookId(
            @PathVariable Integer bookId) {
        
        ApiResponse<List<ProcessingOrderResponse>> response = bookService.getProcessingOrdersByBookId(bookId);
        
        return ResponseEntity.ok(response);
    }

    // ================================================================
    // BOOK STATISTICS APIs - CHI LIEN QUAN DEN SACH
    // ================================================================

    /**
     * API TONG QUAN THONG KE SACH (CHI LIEN QUAN SACH)
     * GET /api/books/stats/overview
     * Thong ke so luong sach, ton kho, khuyen mai
     */
    @GetMapping("/stats/overview")
    public ResponseEntity<ApiResponse<BookStatsOverviewResponse>> getBookStatsOverview() {
        ApiResponse<BookStatsOverviewResponse> response = bookService.getBookStatsOverview();
        return ResponseEntity.ok(response);
    }

    /**
     * API SO SANH SACH
     * GET /api/books/stats/compare
     * So sanh hieu suat giua 2 sach hoac 1 sach voi tat ca
     */
    @GetMapping("/stats/compare")
    public ResponseEntity<ApiResponse<BookComparisonResponse>> compareBooks(
            @RequestParam Integer book1Id,
            @RequestParam(required = false) Integer book2Id) {
        ApiResponse<BookComparisonResponse> response = bookService.compareBooks(book1Id, book2Id);
        return ResponseEntity.ok(response);
    }

    /**
     * üìä API TH·ªêNG K√ä T·ªîNG QUAN - TIER 1 (Summary)
     * GET /api/admin/books/statistics/summary
     * Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫π cho chart overview - ch·ªâ t·ªïng s·ªë s√°ch b√°n theo th·ªùi gian
     * 
     * @param period day/week/month/year/custom (m·∫∑c ƒë·ªãnh day)
     * @param fromDate timestamp b·∫Øt ƒë·∫ßu (t√πy ch·ªçn - b·∫Øt bu·ªôc n·∫øu period=custom)
     * @param toDate timestamp k·∫øt th√∫c (t√πy ch·ªçn - b·∫Øt bu·ªôc n·∫øu period=custom)
     */
    @GetMapping("/statistics/summary")
    public ResponseEntity<ApiResponse<List<Map<String, Object>>>> getBookStatisticsSummary(
            @RequestParam(defaultValue = "day") String period,
            @RequestParam(required = false) Long fromDate,
            @RequestParam(required = false) Long toDate) {
        
        ApiResponse<List<Map<String, Object>>> response = bookService.getBookStatisticsSummary(period, fromDate, toDate);
        return ResponseEntity.ok(response);
    }

    /**
     * üìä API TH·ªêNG K√ä CHI TI·∫æT - TIER 2 (Details)  
     * GET /api/admin/books/statistics/details
     * Tr·∫£ v·ªÅ top s√°ch chi ti·∫øt khi user click v√†o ƒëi·ªÉm c·ª• th·ªÉ tr√™n chart
     * 
     * @param period day/week/month/year (lo·∫°i kho·∫£ng th·ªùi gian)
     * @param date timestamp s·ªë ƒë·∫°i di·ªán cho kho·∫£ng th·ªùi gian c·∫ßn xem
     * @param limit s·ªë l∆∞·ª£ng s√°ch mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh 10)
     */
    @GetMapping("/statistics/details")
    public ResponseEntity<ApiResponse<List<Map<String, Object>>>> getBookStatisticsDetails(
            @RequestParam String period,
            @RequestParam Long date,
            @RequestParam(defaultValue = "10") Integer limit) {
        
        ApiResponse<List<Map<String, Object>>> response = bookService.getBookStatisticsDetails(period, date, limit);
        return ResponseEntity.ok(response);
    }



    /**
     * üìä API Dropdown search cho vi·ªác ch·ªçn s√°ch (d√†nh cho comparison)
     */
    @GetMapping("/search-dropdown")
    public ResponseEntity<ApiResponse<List<org.datn.bookstation.dto.response.BookSearchResponse>>> searchBooksForDropdown(
            @RequestParam(required = false) String q,
            @RequestParam(required = false, defaultValue = "50") Integer limit) {
        ApiResponse<List<org.datn.bookstation.dto.response.BookSearchResponse>> response =
            bookService.searchBooksForDropdown(q, limit);
        return ResponseEntity.ok(response);
    }
    
    /**
     * üìä API l·∫•y danh s√°ch s√°ch c√≥ t·ªâ l·ªá ƒë√°nh gi√° t√≠ch c·ª±c >= 75% v·ªõi th√¥ng tin sentiment chi ti·∫øt
     * GET /api/books/high-positive-rating
     */
    @GetMapping("/debug-week-calculation")
    public ResponseEntity<ApiResponse<Map<String, Object>>> debugWeekCalculation(
            @RequestParam Long timestamp) {

        Map<String, Object> debug = new HashMap<>();

        // Input timestamp info
        LocalDate inputDate = Instant.ofEpochMilli(timestamp).atZone(ZoneId.systemDefault()).toLocalDate();
        debug.put("inputTimestamp", timestamp);
        debug.put("inputDate", inputDate.toString());
        debug.put("inputDayOfWeek", inputDate.getDayOfWeek().toString());

        // Calculate week range
        LocalDate weekStart = inputDate.with(java.time.DayOfWeek.MONDAY);
        LocalDate weekEnd = weekStart.plusDays(6);
        long startTime = weekStart.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();
        long endTime = weekEnd.atTime(23, 59, 59, 999_000_000).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();

        debug.put("weekStart", weekStart.toString());
        debug.put("weekEnd", weekEnd.toString());
        debug.put("startTimestamp", startTime);
        debug.put("endTimestamp", endTime);
        debug.put("startInstant", Instant.ofEpochMilli(startTime).toString());
        debug.put("endInstant", Instant.ofEpochMilli(endTime).toString());

        // Test what data is found in this range
        List<Object[]> testData = orderDetailRepository.findTopBooksByDateRange(startTime, endTime, 10);
        debug.put("booksFoundCount", testData.size());

        if (!testData.isEmpty()) {
            List<Map<String, Object>> books = new ArrayList<>();
            for (Object[] row : testData) {
                Map<String, Object> book = new HashMap<>();
                book.put("bookId", row[0]);
                book.put("bookCode", row[1]);
                book.put("bookName", row[2]);
                book.put("quantitySold", row[5]);
                books.add(book);
            }
            debug.put("booksFound", books);
        }

        ApiResponse<Map<String, Object>> response = new ApiResponse<>(200, "Debug info", debug);
        return ResponseEntity.ok(response);
    }
    @GetMapping("/high-positive-rating")
    public ResponseEntity<ApiResponse<PaginationResponse<BookSentimentResponse>>> getBooksWithHighPositiveRating(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        ApiResponse<PaginationResponse<BookSentimentResponse>> response = bookService.getBooksWithHighPositiveRating(page, size);
        return ResponseEntity.ok(response);
    }
    
    // ‚úÖ API l·∫•y processing quantity cho m·ªôt s√°ch
    @GetMapping("/processing-quantity/{bookId}")
    public ResponseEntity<ApiResponse<Integer>> getProcessingQuantity(@PathVariable Integer bookId) {
        try {
            Integer processingQuantity = bookProcessingQuantityService.getProcessingQuantity(bookId);
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y processing quantity th√†nh c√¥ng", processingQuantity));
        } catch (Exception e) {
            return ResponseEntity.ok(new ApiResponse<>(500, "L·ªói khi l·∫•y processing quantity: " + e.getMessage(), null));
        }
    }

    @GetMapping("/isbn/{isbn}")
    public ResponseEntity<ApiResponse<PosBookItemResponse>> getByIsbn(@PathVariable String isbn) {
        ApiResponse<PosBookItemResponse> resp = bookService.getBookByIsbn(isbn);
        HttpStatus status = switch (resp.getStatus()) {
            case 200 -> HttpStatus.OK;
            case 404 -> HttpStatus.NOT_FOUND;
            case 400 -> HttpStatus.BAD_REQUEST;
            default -> HttpStatus.OK;
        };
        return ResponseEntity.status(status).body(resp);
    }

}
