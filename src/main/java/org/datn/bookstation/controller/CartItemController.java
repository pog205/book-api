package org.datn.bookstation.controller;

import lombok.AllArgsConstructor;
import org.datn.bookstation.dto.request.CartItemRequest;
import org.datn.bookstation.dto.request.BatchCartItemRequest;
import org.datn.bookstation.dto.request.SmartCartItemRequest;
import org.datn.bookstation.dto.response.ApiResponse;
import org.datn.bookstation.dto.response.CartItemResponse;
import org.datn.bookstation.service.CartItemService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;

@RestController
@AllArgsConstructor
@RequestMapping("/api/carts/items")
public class CartItemController {
    
    private final CartItemService cartItemService;

    /**
     * L·∫•y t·∫•t c·∫£ items trong gi·ªè h√†ng c·ªßa user
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<ApiResponse<List<CartItemResponse>>> getCartItemsByUserId(@PathVariable Integer userId) {
        try {
            List<CartItemResponse> cartItems = cartItemService.getCartItemsByUserId(userId);
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng", cartItems));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ApiResponse<>(500, "L·ªói khi l·∫•y danh s√°ch: " + e.getMessage(), null));
        }
    }

    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (Auto-detect flash sale)
     * Backend s·∫Ω t·ª± ƒë·ªông t√¨m flash sale t·ªët nh·∫•t cho s·∫£n ph·∫©m
     */
    @PostMapping
    public ResponseEntity<ApiResponse<CartItemResponse>> addItemToCart(@Valid @RequestBody CartItemRequest request) {
        ApiResponse<CartItemResponse> response = cartItemService.addItemToCart(request);
        
        if (response.getStatus() == 200) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
        }
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng CartItem
     */
    @PutMapping("/{cartItemId}")
    public ResponseEntity<ApiResponse<CartItemResponse>> updateCartItem(
            @PathVariable Integer cartItemId, 
            @RequestParam Integer quantity) {
        
        ApiResponse<CartItemResponse> response = cartItemService.updateCartItem(cartItemId, quantity);
        return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
    }

    /**
     * X√≥a CartItem kh·ªèi gi·ªè h√†ng
     */
    @DeleteMapping("/{cartItemId}")
    public ResponseEntity<ApiResponse<String>> removeCartItem(@PathVariable Integer cartItemId) {
        ApiResponse<String> response = cartItemService.removeCartItem(cartItemId);
        return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
    }

    /**
     * Th√™m nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c (batch)
     */
    @PostMapping("/batch")
    public ResponseEntity<ApiResponse<List<CartItemResponse>>> addItemsToCartBatch(
            @Valid @RequestBody BatchCartItemRequest request) {
        
        ApiResponse<List<CartItemResponse>> response = cartItemService.addItemsToCartBatch(request);
        return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
    }

    /**
     * Validate v√† c·∫≠p nh·∫≠t c√°c CartItems c·ªßa user
     */
    @PostMapping("/user/{userId}/validate")
    public ResponseEntity<ApiResponse<List<CartItemResponse>>> validateAndUpdateCartItems(@PathVariable Integer userId) {
        ApiResponse<List<CartItemResponse>> response = cartItemService.validateAndUpdateCartItems(userId);
        return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
    }

    /**
     * Ki·ªÉm tra ownership c·ªßa CartItem
     */
    @GetMapping("/{cartItemId}/check-ownership/{userId}")
    public ResponseEntity<ApiResponse<Boolean>> checkCartItemOwnership(
            @PathVariable Integer cartItemId, 
            @PathVariable Integer userId) {
        
        try {
            boolean belongs = cartItemService.isCartItemBelongsToUser(cartItemId, userId);
            return ResponseEntity.ok(new ApiResponse<>(200, "Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu th√†nh c√¥ng", belongs));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ApiResponse<>(500, "L·ªói khi ki·ªÉm tra: " + e.getMessage(), null));
        }
    }

    /**
     * üîÑ NEW: Sync cart items khi flash sale ƒë∆∞·ª£c gia h·∫°n (Admin only)
     */
    @PostMapping("/sync-flash-sale/{flashSaleId}")
    public ResponseEntity<ApiResponse<Integer>> syncCartItemsWithFlashSale(@PathVariable Integer flashSaleId) {
        try {
            int syncedCount = cartItemService.syncCartItemsWithUpdatedFlashSale(flashSaleId);
            return ResponseEntity.ok(new ApiResponse<>(200, 
                "ƒê√£ sync " + syncedCount + " cart items v·ªõi flash sale " + flashSaleId, syncedCount));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ApiResponse<>(500, "L·ªói khi sync: " + e.getMessage(), null));
        }
    }

    /**
     * üßπ NEW: Merge duplicate cart items cho user (Admin only)
     */
    @PostMapping("/merge-duplicates/{userId}")
    public ResponseEntity<ApiResponse<Integer>> mergeDuplicateCartItems(@PathVariable Integer userId) {
        try {
            int mergedCount = cartItemService.mergeDuplicateCartItemsForUser(userId);
            return ResponseEntity.ok(new ApiResponse<>(200, 
                "ƒê√£ merge " + mergedCount + " duplicate cart items cho user " + userId, mergedCount));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ApiResponse<>(500, "L·ªói khi merge: " + e.getMessage(), null));
        }
    }

    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√¥ng minh (Deprecated - s·ª≠ d·ª•ng POST /api/carts/items)
     * Endpoint n√†y gi·ªØ l·∫°i ƒë·ªÉ backward compatibility
     */
    @PostMapping("/smart")
    @Deprecated
    public ResponseEntity<ApiResponse<CartItemResponse>> addSmartItemToCart(
            @RequestBody @Valid SmartCartItemRequest request) {
        try {
            ApiResponse<CartItemResponse> response = cartItemService.addSmartItemToCart(request);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(new ApiResponse<>(400, e.getMessage(), null));
        }
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ªçn/b·ªè CartItem (toggle)
     */
    @PutMapping("/{cartItemId}/select")
    public ResponseEntity<ApiResponse<CartItemResponse>> toggleCartItemSelected(
            @PathVariable Integer cartItemId) {
        ApiResponse<CartItemResponse> response = cartItemService.toggleCartItemSelected(cartItemId);
        return ResponseEntity.status(HttpStatus.valueOf(response.getStatus())).body(response);
    }
}
