package org.datn.bookstation.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.datn.bookstation.dto.request.QuickActionRequest;
import org.datn.bookstation.dto.response.*;
import org.datn.bookstation.service.AdvancedAnalyticsService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

/**
 * Advanced Business Intelligence Controller
 * Provides AI-powered dashboard insights and automated business actions
 * All endpoints require ADMIN role access
 */
@Slf4j
@RestController
@RequestMapping("/api/advanced-analytics")
@RequiredArgsConstructor
@PreAuthorize("hasRole('ADMIN')")
public class AdvancedAnalyticsController {

    private final AdvancedAnalyticsService advancedAnalyticsService;

    /**
     * üìä Get Survival KPIs - Critical business health metrics
     * GET /api/advanced-analytics/survival-kpis
     */
    @GetMapping("/survival-kpis")
    public ResponseEntity<ApiResponse<SurvivalKpiResponse>> getSurvivalKpis() {
        log.info("üìä [API] Getting survival KPIs");
        
        try {
            SurvivalKpiResponse response = advancedAnalyticsService.getSurvivalKpis();
            
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y KPI s·ªëng c√≤n th√†nh c√¥ng", response));
                    
        } catch (Exception e) {
            log.error("‚ùå [API] Error getting survival KPIs: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(new ApiResponse<SurvivalKpiResponse>(500, "L·ªói server khi l·∫•y KPI s·ªëng c√≤n: " + e.getMessage(), null));
        }
    }

    /**
     * üéØ Get Opportunity Radar - Business opportunity detection
     * GET /api/advanced-analytics/opportunity-radar
     */
    @GetMapping("/opportunity-radar")
    public ResponseEntity<ApiResponse<OpportunityRadarResponse>> getOpportunityRadar() {
        log.info("üéØ [API] Getting opportunity radar");
        
        try {
            OpportunityRadarResponse response = advancedAnalyticsService.getOpportunityRadar();
            
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y radar c∆° h·ªôi th√†nh c√¥ng", response));
                    
        } catch (Exception e) {
            log.error("‚ùå [API] Error getting opportunity radar: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(new ApiResponse<OpportunityRadarResponse>(500, "L·ªói server khi l·∫•y radar c∆° h·ªôi: " + e.getMessage(), null));
        }
    }

    /**
     * üó∫Ô∏è Get Order Health Map - Regional and shipping health analysis
     * GET /api/advanced-analytics/order-health-map
     */
    @GetMapping("/order-health-map")
    public ResponseEntity<ApiResponse<OrderHealthMapResponse>> getOrderHealthMap() {
        log.info("üó∫Ô∏è [API] Getting order health map");
        
        try {
            OrderHealthMapResponse response = advancedAnalyticsService.getOrderHealthMap();
            
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y b·∫£n ƒë·ªì s·ª©c kh·ªèe ƒë∆°n h√†ng th√†nh c√¥ng", response));
                    
        } catch (Exception e) {
            log.error("‚ùå [API] Error getting order health map: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(new ApiResponse<OrderHealthMapResponse>(500, "L·ªói server khi l·∫•y b·∫£n ƒë·ªì s·ª©c kh·ªèe: " + e.getMessage(), null));
        }
    }

    /**
     * üö® Get Real-time Alerts - Critical system alerts and monitoring
     * GET /api/advanced-analytics/real-time-alerts
     */
    @GetMapping("/real-time-alerts")
    public ResponseEntity<ApiResponse<RealTimeAlertsResponse>> getRealTimeAlerts() {
        log.info("üö® [API] Getting real-time alerts");
        
        try {
            RealTimeAlertsResponse response = advancedAnalyticsService.getRealTimeAlerts();
            
            return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y c·∫£nh b√°o th·ªùi gian th·ª±c th√†nh c√¥ng", response));
                    
        } catch (Exception e) {
            log.error("‚ùå [API] Error getting real-time alerts: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(new ApiResponse<RealTimeAlertsResponse>(500, "L·ªói server khi l·∫•y c·∫£nh b√°o: " + e.getMessage(), null));
        }
    }

    /**
     * ‚ö° Execute Quick Action - Automated business actions
     * POST /api/advanced-analytics/quick-actions
     * 
     * @param request Action type and parameters
     */
    @PostMapping("/quick-actions")
    public ResponseEntity<ApiResponse<QuickActionResponse>> executeQuickAction(
            @RequestBody QuickActionRequest request) {
        log.info("‚ö° [API] Executing quick action: {}", request.getActionType());
        
        try {
            // Validate request
            if (request.getActionType() == null || request.getActionType().trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<QuickActionResponse>(400, "Action type kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", null));
            }

            QuickActionResponse response = advancedAnalyticsService.executeQuickAction(request);
            
            if ("failed".equals(response.getStatus())) {
                return ResponseEntity.internalServerError()
                        .body(new ApiResponse<QuickActionResponse>(500, "Th·ª±c hi·ªán h√†nh ƒë·ªông th·∫•t b·∫°i: " + response.getErrorMessage(), response));
            }
            
            return ResponseEntity.ok(new ApiResponse<>(200, "H√†nh ƒë·ªông ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng", response));
                    
        } catch (IllegalArgumentException e) {
            log.error("‚ùå [API] Invalid quick action request: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(new ApiResponse<QuickActionResponse>(400, "Lo·∫°i h√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá: " + e.getMessage(), null));
        } catch (Exception e) {
            log.error("‚ùå [API] Error executing quick action: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(new ApiResponse<QuickActionResponse>(500, "L·ªói server khi th·ª±c hi·ªán h√†nh ƒë·ªông: " + e.getMessage(), null));
        }
    }
}
