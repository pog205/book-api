package org.datn.bookstation.repository;

import org.datn.bookstation.entity.CartItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface CartItemRepository extends JpaRepository<CartItem, Integer> {
    
    /**
     * L·∫•y t·∫•t c·∫£ items trong gi·ªè h√†ng
     */
    List<CartItem> findByCartId(Integer cartId);
    
    /**
     * L·∫•y items active trong gi·ªè h√†ng
     */
    @Query("SELECT ci FROM CartItem ci WHERE ci.cart.id = :cartId AND ci.status = 1")
    List<CartItem> findActiveItemsByCartId(@Param("cartId") Integer cartId);
    
    /**
     * L·∫•y items c·ªßa user (qua cart)
     */
    @Query("SELECT ci FROM CartItem ci WHERE ci.cart.user.id = :userId AND ci.status = 1")
    List<CartItem> findByUserId(@Param("userId") Integer userId);
    
    /**
     * T√¨m CartItem c·ª• th·ªÉ trong gi·ªè h√†ng
     * - C√πng book v√† kh√¥ng c√≥ flash sale
     * - Ho·∫∑c c√πng book v√† c√πng flash sale item
     */
    @Query("SELECT ci FROM CartItem ci WHERE ci.cart.id = :cartId " +
           "AND ci.book.id = :bookId " +
           "AND (:flashSaleItemId IS NULL AND ci.flashSaleItem IS NULL " +
           "     OR ci.flashSaleItem.id = :flashSaleItemId) " +
           "AND ci.status = 1")
    Optional<CartItem> findExistingCartItem(@Param("cartId") Integer cartId, 
                                          @Param("bookId") Integer bookId,
                                          @Param("flashSaleItemId") Integer flashSaleItemId);

    /**
     * üî• NEW: T√¨m t·∫•t c·∫£ cart items c·ªßa c√πng book (ƒë·ªÉ merge duplicates)
     * S·∫Øp x·∫øp theo updatedAt DESC ƒë·ªÉ l·∫•y item m·ªõi nh·∫•t tr∆∞·ªõc
     */
    @Query("SELECT ci FROM CartItem ci WHERE ci.cart.id = :cartId " +
           "AND ci.book.id = :bookId " +
           "AND ci.status = 1 " +
           "ORDER BY ci.updatedAt DESC")
    List<CartItem> findExistingCartItemsByBook(@Param("cartId") Integer cartId, 
                                              @Param("bookId") Integer bookId);

    /**
     * X√≥a t·∫•t c·∫£ items trong gi·ªè h√†ng
     */
    void deleteByCartId(Integer cartId);
    
    /**
     * ƒê·∫øm s·ªë items trong gi·ªè h√†ng
     */
    @Query("SELECT COUNT(ci) FROM CartItem ci WHERE ci.cart.id = :cartId AND ci.status = 1")
    Integer countActiveItemsByCartId(@Param("cartId") Integer cartId);
    
    /**
     * T√≠nh t·ªïng quantity trong gi·ªè h√†ng
     */
    @Query("SELECT COALESCE(SUM(ci.quantity), 0) FROM CartItem ci WHERE ci.cart.id = :cartId AND ci.status = 1")
    Integer sumQuantityByCartId(@Param("cartId") Integer cartId);
    
    /**
     * T√¨m items c√≥ flash sale h·∫øt h·∫°n cho user c·ª• th·ªÉ
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.cart.user.id = :userId " +
           "AND ci.flashSaleItem IS NOT NULL " +
           "AND ci.flashSaleItem.flashSale.endTime < :currentTime " +
           "AND ci.status = 1")
    List<CartItem> findExpiredFlashSaleItems(@Param("userId") Integer userId, 
                                           @Param("currentTime") Long currentTime);
    
    /**
     * T√¨m T·∫§T C·∫¢ cart items c√≥ flash sale ƒë√£ h·∫øt h·∫°n (cho scheduler batch processing)
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.flashSaleItem IS NOT NULL " +
           "AND ci.flashSaleItem.flashSale.endTime < :currentTime " +
           "AND ci.status = 1")
    List<CartItem> findAllExpiredFlashSaleItems(@Param("currentTime") Long currentTime);
    
    /**
     * T√¨m cart items c·ªßa m·ªôt flash sale c·ª• th·ªÉ (cho dynamic scheduler)
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.flashSaleItem.flashSale.id = :flashSaleId " +
           "AND ci.status = 1")
    List<CartItem> findByFlashSaleId(@Param("flashSaleId") Integer flashSaleId);
    
    /**
     * ‚úÖ DEPRECATED: Kh√¥ng c√≤n c·∫ßn batch update cart items khi flash sale h·∫øt h·∫°n
     * Logic m·ªõi: Gi·ªØ nguy√™n flashSaleItemId, ch·ªâ update status c·ªßa FlashSaleItem
     * Cart s·∫Ω t·ª± ƒë·ªông tr·∫£ v·ªÅ gi√° g·ªëc khi flashSaleItem.status = 0
     */
    // @Deprecated - Removed to prevent accidentally setting flashSaleItem = null
    // int batchUpdateExpiredFlashSales(@Param("flashSaleIds") List<Integer> flashSaleIds, 
    //                                @Param("updatedAt") Long updatedAt);
    
    /**
     * Validate cart item stock before processing
     * Ki·ªÉm tra quantity trong cart c√≥ v∆∞·ª£t qu√° stock hi·ªán t·∫°i kh√¥ng
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.cart.user.id = :userId " +
           "AND ci.status = 1 " +
           "AND ((ci.flashSaleItem IS NOT NULL AND ci.quantity > ci.flashSaleItem.stockQuantity) " +
           "     OR (ci.flashSaleItem IS NULL AND ci.quantity > ci.book.stockQuantity))")
    List<CartItem> findCartItemsExceedingStock(@Param("userId") Integer userId);
    
    /**
     * T√¨m cart items c√≥ flash sale s·∫Øp h·∫øt h·∫°n (c√≤n 5 ph√∫t)
     * D√πng ƒë·ªÉ g·ª≠i notification warning cho user
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.flashSaleItem IS NOT NULL " +
           "AND ci.flashSaleItem.flashSale.endTime BETWEEN :now AND :warningTime " +
           "AND ci.status = 1")
    List<CartItem> findFlashSaleItemsAboutToExpire(@Param("now") Long now, 
                                                  @Param("warningTime") Long warningTime);

    /**
     * üîÑ NEW: T√¨m cart items c·∫ßn sync v·ªõi flash sale m·ªõi ƒë∆∞·ª£c gia h·∫°n
     * T√¨m items c·ªßa book c√≥ flash sale ƒë∆∞·ª£c update m√† ch∆∞a apply flash sale n√†y
     */
    @Query("SELECT ci FROM CartItem ci " +
           "WHERE ci.book.id = :bookId " +
           "AND ci.status = 1 " +
           "AND (ci.flashSaleItem IS NULL " +
           "     OR ci.flashSaleItem.flashSale.id != :flashSaleId)")
    List<CartItem> findCartItemsForFlashSaleSync(@Param("bookId") Long bookId,
                                                 @Param("flashSaleId") Integer flashSaleId);

    /**
     * üî• NEW: T√¨m cart items c·ªßa book m√† ch∆∞a c√≥ flash sale item
     * D√πng ƒë·ªÉ sync khi admin t·∫°o flash sale m·ªõi cho s·∫£n ph·∫©m ƒë√£ c√≥ trong cart
     */
    @Query("SELECT ci FROM CartItem ci WHERE ci.book.id = :bookId " +
           "AND ci.flashSaleItem IS NULL " +
           "AND ci.status = 1")
    List<CartItem> findCartItemsWithoutFlashSale(@Param("bookId") Long bookId);
}
