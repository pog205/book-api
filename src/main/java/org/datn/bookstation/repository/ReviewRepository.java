package org.datn.bookstation.repository;

import org.datn.bookstation.entity.Review;
import org.datn.bookstation.entity.enums.ReviewStatus;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface ReviewRepository extends JpaRepository<Review, Integer>, JpaSpecificationExecutor<Review> {
    
    // T√¨m review theo bookId v√† status
    List<Review> findByBookIdAndReviewStatusIn(Integer bookId, List<ReviewStatus> statuses);
    
    // T√¨m t·∫•t c·∫£ review published c·ªßa m·ªôt book  
    List<Review> findByBookId(Integer bookId);

    // Ki·ªÉm tra xem user ƒë√£ vi·∫øt review cho s√°ch n√†y ch∆∞a
    boolean existsByBookIdAndUserId(Integer bookId, Integer userId);

    // Ki·ªÉm tra review thu·ªôc v·ªÅ user hay kh√¥ng (ƒë·ªÉ cho ph√©p s·ª≠a)
    boolean existsByIdAndUserId(Integer id, Integer userId);
    
    // T√¨m review theo userId
    List<Review> findByUserId(Integer userId);

    // T√¨m review theo id v√† user
    Review findByIdAndUserId(Integer id, Integer userId);

    // T√¨m review theo bookId v√† userId
    Review findByBookIdAndUserId(Integer bookId, Integer userId);
    
    // T√¨m danh s√°ch review theo bookId v√† userId (ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p tr√πng l·∫∑p)
    List<Review> findAllByBookIdAndUserId(Integer bookId, Integer userId);

    // ƒê·∫øm t·ªïng theo status
    long countByReviewStatus(ReviewStatus status);
    long countByReviewStatusIn(List<ReviewStatus> statuses);
    
    /**
     * L·∫•y danh s√°ch book ID c√≥ t·ªâ l·ªá ƒë√°nh gi√° t√≠ch c·ª±c >= threshold
     * Ch·ªâ t√≠nh c√°c review ƒë√£ APPROVED v√† EDITED (kh√¥ng t√≠nh PENDING, REJECTED, HIDDEN)
     */
    @Query(value = """
            SELECT book_id 
            FROM (
                SELECT 
                    book_id,
                    COUNT(*) as total_reviews,
                    COUNT(CASE WHEN is_positive = 1 THEN 1 END) as positive_reviews,
                    ROUND((COUNT(CASE WHEN is_positive = 1 THEN 1 END) * 100.0 / COUNT(*)), 2) as positive_percentage
                FROM review 
                WHERE review_status IN ('APPROVED', 'EDITED')
                    AND is_positive IS NOT NULL
                GROUP BY book_id
                HAVING COUNT(*) >= :minReviews 
                    AND (COUNT(CASE WHEN is_positive = 1 THEN 1 END) * 100.0 / COUNT(*)) >= :threshold
            ) as book_stats
            ORDER BY positive_percentage DESC
            """, nativeQuery = true)
    List<Integer> findBookIdsWithHighPositiveRating(@Param("threshold") double threshold, 
                                                   @Param("minReviews") int minReviews);

    /**
     * üìä L·∫•y th√¥ng tin sentiment chi ti·∫øt cho danh s√°ch s√°ch (query ƒë∆°n gi·∫£n h√≥a)
     */
    @Query(value = """
            SELECT 
                book_id,
                ROUND(AVG(CAST(rating as float)), 2) as average_rating,
                COUNT(*) as total_reviews,
                COUNT(CASE WHEN is_positive = 1 THEN 1 END) as positive_reviews
            FROM review 
            WHERE review_status IN ('APPROVED', 'EDITED')
                AND is_positive IS NOT NULL
                AND book_id IN :bookIds
            GROUP BY book_id
            """, nativeQuery = true)
    List<Object[]> findSimpleSentimentStatsByBookIds(@Param("bookIds") List<Integer> bookIds);

    /**
     * üîç DEBUG: Query ƒë∆°n gi·∫£n ƒë·ªÉ test d·ªØ li·ªáu review
     */
    @Query(value = """
            SELECT book_id, rating, is_positive, review_status 
            FROM review 
            WHERE book_id = :bookId
            """, nativeQuery = true)
    List<Object[]> findBasicReviewDataByBookId(@Param("bookId") Integer bookId);
}
