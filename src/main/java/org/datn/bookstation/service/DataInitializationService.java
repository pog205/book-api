package org.datn.bookstation.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.datn.bookstation.entity.*;
import org.datn.bookstation.entity.enums.*;
import org.datn.bookstation.repository.*;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DataInitializationService implements CommandLineRunner {

    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final RankRepository rankRepository;
    private final UserRankRepository userRankRepository;
    private final CategoryRepository categoryRepository;
    private final AuthorRepository authorRepository;
    private final SupplierRepository supplierRepository;
    private final PublisherRepository publisherRepository;
    private final BookRepository bookRepository;
    private final AuthorBookRepository authorBookRepository;
    private final VoucherRepository voucherRepository;
    private final UserVoucherRepository userVoucherRepository;
    private final FlashSaleRepository flashSaleRepository;
    private final FlashSaleItemRepository flashSaleItemRepository;
    private final AddressRepository addressRepository;
    private final CartRepository cartRepository;
    private final CartItemRepository cartItemRepository;
    private final OrderRepository orderRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final PointRepository pointRepository;
    private final ReviewRepository reviewRepository;
    private final CampaignRepository campaignRepository;
    private final RewardRepository rewardRepository;
    private final UserCampaignRepository userCampaignRepository;
    private final BoxHistoryRepository boxHistoryRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) {
        try {
            log.info("Starting data initialization...");

            // Ki·ªÉm tra t·ª´ng lo·∫°i d·ªØ li·ªáu v√† ch·ªâ kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
            initializeIfEmpty();

            // Hi·ªÉn th·ªã tr·∫°ng th√°i d·ªØ li·ªáu sau khi ho√†n th√†nh
            checkDataStatus();

            log.info("Data initialization completed successfully!");
        } catch (Exception e) {
            log.error("Error during data initialization: ", e);
            // Don't rethrow to prevent application startup failure
        }
    }

    private void initializeIfEmpty() {
        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Roles
        if (roleRepository.count() == 0) {
            initializeRoles();
        } else {
            log.info("Roles already exist, skipping role initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Ranks
        if (rankRepository.count() == 0) {
            initializeRanks();
        } else {
            log.info("Ranks already exist, skipping rank initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Users
        if (userRepository.count() == 0) {
            initializeUsers();
        } else {
            log.info("Users already exist, skipping user initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o UserRanks
        if (userRankRepository.count() == 0) {
            initializeUserRanks();
        } else {
            log.info("User ranks already exist, skipping user rank initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Categories
        if (categoryRepository.count() == 0) {
            initializeCategories();
        } else {
            log.info("Categories already exist, skipping category initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Authors
        if (authorRepository.count() == 0) {
            initializeAuthors();
        } else {
            log.info("Authors already exist, skipping author initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Suppliers
        if (supplierRepository.count() == 0) {
            initializeSuppliers();
        } else {
            log.info("Suppliers already exist, skipping supplier initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Publishers
        if (publisherRepository.count() == 0) {
            initializePublishers();
        } else {
            log.info("Publishers already exist, skipping publisher initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Books
        if (bookRepository.count() == 0) {
            initializeBooks();
        } else {
            log.info("Books already exist, skipping book initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o AuthorBooks
        if (authorBookRepository.count() == 0) {
            initializeAuthorBooks();
        } else {
            log.info("Author-book relationships already exist, skipping initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Vouchers
        if (voucherRepository.count() == 0) {
            initializeVouchers();
        } else {
            log.info("Vouchers already exist, skipping voucher initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o UserVouchers
        if (userVoucherRepository.count() == 0) {
            initializeUserVouchers();
        } else {
            log.info("User vouchers already exist, skipping initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o FlashSales
        if (flashSaleRepository.count() == 0) {
            initializeFlashSales();
        } else {
            log.info("Flash sales already exist, skipping initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Addresses - DISABLED
        // if (addressRepository.count() == 0) {
        //     initializeAddresses();
        // } else {
        //     log.info("Addresses already exist, skipping initialization.");
        // }
        log.info("Address initialization is disabled - no address data will be created.");

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Carts
        if (cartRepository.count() == 0) {
            initializeCarts();
        } else {
            log.info("Carts already exist, skipping initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Orders - DISABLED
        // if (orderRepository.count() == 0) {
        //     initializeOrders();
        //     initializeTrendingOrderData(); // ‚úÖ TH√äM: T·∫°o th√™m d·ªØ li·ªáu cho trending
        //     
        //     // ‚úÖ TH√äM: T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng test theo th·ªùi gian cho L√™ VƒÉn C (ch·ªâ khi ch∆∞a c√≥ ƒë∆°n h√†ng n√†o)
        //     initializeTestOrdersForLeVanC();
        // } else {
        //     log.info("Orders already exist, skipping initialization.");
        // }
        log.info("Order initialization is disabled - no order data will be created.");

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Points - DISABLED (v√¨ kh√¥ng c√≥ order)
        // if (pointRepository.count() == 0) {
        //     initializePoints(); // T·∫°m th·ªùi skip ƒë·ªÉ test ph·∫ßn kh√°c tr∆∞·ªõc
        // } else {
        //     log.info("Points already exist, skipping initialization.");
        // }
        log.info("Points initialization is disabled - requires orders to exist first.");

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Reviews
        if (reviewRepository.count() == 0) {
            initializeReviews();
            initializeTrendingReviewData(); // ‚úÖ TH√äM: T·∫°o th√™m review cho trending
        } else {
            log.info("Reviews already exist, skipping initialization.");
        }

        // ===== üéÆ MINIGAME INITIALIZATION =====
        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Campaigns
        if (campaignRepository.count() == 0) {
            initializeCampaigns();
        } else {
            log.info("Campaigns already exist, skipping initialization.");
        }

        // Ki·ªÉm tra v√† kh·ªüi t·∫°o Rewards
        if (rewardRepository.count() == 0) {
            initializeRewards();
        } else {
            log.info("Rewards already exist, skipping initialization.");
        }
    }

    private void initializeRoles() {
        log.info("Initializing roles...");
        List<Role> roles = Arrays.asList(
                createRole(RoleName.ADMIN, "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng"),
                createRole(RoleName.STAFF, "Nh√¢n vi√™n"),
                createRole(RoleName.CUSTOMER, "Kh√°ch h√†ng")
        );
        roleRepository.saveAll(roles);
    }

    private Role createRole(RoleName roleName, String description) {
        Role role = new Role();
        role.setRoleName(roleName);
        role.setDescription(description);
        role.setStatus((byte) 1);
        return role;
    }

    private void initializeRanks() {
        log.info("Initializing ranks...");
        List<Rank> ranks = Arrays.asList(
                createRank("V√ÄNG", new BigDecimal("5000000"), new BigDecimal("1.5")),
                createRank("B·∫†C", new BigDecimal("1000000"), new BigDecimal("1.2")),
                createRank("KIM C∆Ø∆†NG", new BigDecimal("10000000"), new BigDecimal("2.0"))
        );
        rankRepository.saveAll(ranks);
    }

    private Rank createRank(String name, BigDecimal minSpent, BigDecimal pointMultiplier) {
        Rank rank = new Rank();
        rank.setRankName(name);
        rank.setMinSpent(minSpent);
        rank.setPointMultiplier(pointMultiplier);
        rank.setCreatedAt(System.currentTimeMillis());
        rank.setStatus((byte) 1);
        return rank;
    }

    private void initializeUsers() {
        log.info("Initializing users...");
        Role adminRole = roleRepository.findByRoleName(RoleName.ADMIN).orElse(null);
        Role staffRole = roleRepository.findByRoleName(RoleName.STAFF).orElse(null);
        Role customerRole = roleRepository.findByRoleName(RoleName.CUSTOMER).orElse(null);

        List<User> users = Arrays.asList(
                createUser("admin@bookstation.com", "admin123", "Admin BookStation", adminRole),
                createUser("staff1@bookstation.com", "staff123", "Nguy·ªÖn VƒÉn A", staffRole),
                createUser("staff2@bookstation.com", "staff123", "Tr·∫ßn Th·ªã B", staffRole),
                createUser("customer1@gmail.com", "customer123", "L√™ VƒÉn C", customerRole),
                createUser("customer2@gmail.com", "customer123", "Ph·∫°m Th·ªã D", customerRole),
                createUser("customer3@gmail.com", "customer123", "Ho√†ng VƒÉn E", customerRole),
                createUser("customer4@gmail.com", "customer123", "Ng√¥ Th·ªã F", customerRole),
                createUser("customer5@gmail.com", "customer123", "V≈© VƒÉn G", customerRole)
        );
        userRepository.saveAll(users);
        // Th√™m h√†ng lo·∫°t voucher test cho L√™ VƒÉn C
        addTestVouchersForLeVanC();
    }

    /**
     * T·∫°o v√† g√°n nhi·ªÅu lo·∫°i voucher cho user L√™ VƒÉn C ƒë·ªÉ test ƒë·ªß tr∆∞·ªùng h·ª£p
     */
    private void addTestVouchersForLeVanC() {
        User leVanC = userRepository.findByEmail("customer1@gmail.com").orElse(null);
        if (leVanC == null) return;

        long now = System.currentTimeMillis();
        long oneMonth = 30L * 24 * 60 * 60 * 1000;
        List<Voucher> vouchersToAdd = new java.util.ArrayList<>();

        // 5 voucher mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn (FREESHIP)
        for (int i = 1; i <= 5; i++) {
            vouchersToAdd.add(createVoucher(
                    "FREESHIP" + i,
                    "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
                    "Voucher mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n b·∫•t k·ª≥",
                    VoucherCategory.SHIPPING,
                    DiscountType.FIXED_AMOUNT,
                    null,
                    new BigDecimal("30000"), // Gi·∫£m t·ªëi ƒëa 30k ti·ªÅn ship
                    now,
                    now + oneMonth,
                    BigDecimal.ZERO,
                    new BigDecimal("30000"),
                    1,
                    1,
                    "admin"
            ));
        }

        // 5 voucher gi·∫£m 20k ti·ªÅn ship cho ƒë∆°n t·ª´ 50k
        for (int i = 1; i <= 5; i++) {
            vouchersToAdd.add(createVoucher(
                    "SHIP20K" + i,
                    "Gi·∫£m 20K ti·ªÅn ship",
                    "Gi·∫£m 20.000ƒë ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n t·ª´ 50.000ƒë",
                    VoucherCategory.SHIPPING,
                    DiscountType.FIXED_AMOUNT,
                    null,
                    new BigDecimal("20000"),
                    now,
                    now + oneMonth,
                    new BigDecimal("50000"),
                    new BigDecimal("20000"),
                    1,
                    1,
                    "admin"
            ));
        }

        // 5 voucher th∆∞·ªùng gi·∫£m 40k cho ƒë∆°n t·ª´ 100k
        for (int i = 1; i <= 5; i++) {
            vouchersToAdd.add(createVoucher(
                    "SALE40K" + i,
                    "Gi·∫£m 40K cho ƒë∆°n t·ª´ 100K",
                    "Gi·∫£m 40.000ƒë cho ƒë∆°n h√†ng t·ª´ 100.000ƒë",
                    VoucherCategory.NORMAL,
                    DiscountType.FIXED_AMOUNT,
                    null,
                    new BigDecimal("40000"),
                    now,
                    now + oneMonth,
                    new BigDecimal("100000"),
                    new BigDecimal("40000"),
                    1,
                    1,
                    "admin"
            ));
        }

        // 5 voucher gi·∫£m theo % ƒë∆°n h√†ng (10%, 15%, 20%, 25%, 30%)
        int[] percents = {10, 15, 20, 25, 30};
        for (int i = 0; i < percents.length; i++) {
            vouchersToAdd.add(createVoucher(
                    "SALE" + percents[i] + "PCT",
                    "Gi·∫£m " + percents[i] + "%",
                    "Gi·∫£m " + percents[i] + "% t·ªëi ƒëa " + (percents[i] * 1000) + "ƒë cho ƒë∆°n t·ª´ " + (percents[i] * 10000) + "ƒë",
                    VoucherCategory.NORMAL,
                    DiscountType.PERCENTAGE,
                    new BigDecimal(percents[i]),
                    null,
                    now,
                    now + oneMonth,
                    new BigDecimal(percents[i] * 10000),
                    new BigDecimal(percents[i] * 1000),
                    1,
                    1,
                    "admin"
            ));
        }

        // Shopee style: c√°c voucher ƒë·∫∑c bi·ªát
        vouchersToAdd.add(createVoucher(
                "WELCOME",
                "Voucher ch√†o m·ª´ng ƒë·∫∑c bi·ªát",
                "Gi·∫£m 15% t·ªëi ƒëa 50.000ƒë cho ƒë∆°n t·ª´ 100.000ƒë - Voucher ch√†o m·ª´ng th√†nh vi√™n m·ªõi",
                VoucherCategory.NORMAL,
                DiscountType.PERCENTAGE,
                new BigDecimal("15"),
                null,
                now,
                now + oneMonth,
                new BigDecimal("100000"),
                new BigDecimal("50000"),
                1,
                1,
                "admin"
        ));

        vouchersToAdd.add(createVoucher(
                "FLASHSALE50K",
                "Flash Sale Gi·∫£m 50K",
                "Gi·∫£m 50.000ƒë cho ƒë∆°n t·ª´ 300.000ƒë, ch·ªâ √°p d·ª•ng trong khung gi·ªù v√†ng",
                VoucherCategory.NORMAL,
                DiscountType.FIXED_AMOUNT,
                null,
                new BigDecimal("50000"),
                now,
                now + (3L * 24 * 60 * 60 * 1000), // 3 ng√†y
                new BigDecimal("300000"),
                new BigDecimal("50000"),
                1,
                1,
                "admin"
        ));

        vouchersToAdd.add(createVoucher(
                "NEWUSER100K",
                "Gi·∫£m 100K cho kh√°ch m·ªõi",
                "Gi·∫£m 100.000ƒë cho ƒë∆°n t·ª´ 500.000ƒë, ch·ªâ cho kh√°ch m·ªõi",
                VoucherCategory.NORMAL,
                DiscountType.FIXED_AMOUNT,
                null,
                new BigDecimal("100000"),
                now,
                now + oneMonth,
                new BigDecimal("500000"),
                new BigDecimal("100000"),
                1,
                1,
                "admin"
        ));

        vouchersToAdd.add(createVoucher(
                "SHIPMAX",
                "Mi·ªÖn ph√≠ ship t·ªëi ƒëa 50K",
                "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn t·ªëi ƒëa 50.000ƒë cho ƒë∆°n t·ª´ 200.000ƒë",
                VoucherCategory.SHIPPING,
                DiscountType.FIXED_AMOUNT,
                null,
                new BigDecimal("50000"),
                now,
                now + oneMonth,
                new BigDecimal("200000"),
                new BigDecimal("50000"),
                1,
                1,
                "admin"
        ));

        // L∆∞u voucher v√†o DB
        voucherRepository.saveAll(vouchersToAdd);

        // G√°n cho user L√™ VƒÉn C
        for (Voucher v : vouchersToAdd) {
            for (int i = 0; i < v.getUsageLimitPerUser(); i++) {
                UserVoucher uv = new UserVoucher();
                uv.setUser(leVanC);
                uv.setVoucher(v);
                uv.setUsedCount(0);
                userVoucherRepository.save(uv);
            }
        }
    }

    private User createUser(String email, String password, String fullName, Role role) {
        User user = new User();
        user.setEmail(email);
        user.setPassword(passwordEncoder.encode(password));
        user.setFullName(fullName);
        user.setRole(role);
        user.setPhoneNumber("0123456789");
        user.setStatus((byte) 1);
        user.setTotalPoint(0);
        user.setTotalSpent(BigDecimal.ZERO);
        return user;
    }

    private void initializeUserRanks() {
        log.info("Initializing user ranks...");
        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        Rank goldRank = rankRepository.findByRankName("V√ÄNG").orElse(null);
        for (int i = 0; i < Math.min(3, customers.size()); i++) {
            User customer = customers.get(i);
            UserRank userRank = new UserRank();
            userRank.setUser(customer);
            userRank.setRank(goldRank);
            userRank.setStatus((byte) 1);
            userRank.setCreatedAt(System.currentTimeMillis());
            userRankRepository.save(userRank);
        }
    }

    private void initializeCategories() {
        log.info("Initializing categories...");

        // T·∫°o danh m·ª•c cha
        Category fiction = createCategory("Ti·ªÉu thuy·∫øt", "C√°c t√°c ph·∫©m ti·ªÉu thuy·∫øt", null, 1);
        Category nonFiction = createCategory("Phi ti·ªÉu thuy·∫øt", "S√°ch phi ti·ªÉu thuy·∫øt", null, 1);
        Category education = createCategory("Gi√°o d·ª•c", "S√°ch gi√°o d·ª•c v√† h·ªçc t·∫≠p", null, 1);
        Category children = createCategory("Thi·∫øu nhi", "S√°ch d√†nh cho tr·∫ª em", null, 1);
        Category business = createCategory("Kinh doanh", "S√°ch v·ªÅ kinh doanh v√† qu·∫£n l√Ω", null, 1);

        categoryRepository.saveAll(Arrays.asList(fiction, nonFiction, education, children, business));

        // T·∫°o danh m·ª•c con
        List<Category> subCategories = Arrays.asList(
                createCategory("Trinh th√°m", "Ti·ªÉu thuy·∫øt trinh th√°m", fiction, 1),
                createCategory("L√£ng m·∫°n", "Ti·ªÉu thuy·∫øt l√£ng m·∫°n", fiction, 1),
                createCategory("Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "Ti·ªÉu thuy·∫øt khoa h·ªçc vi·ªÖn t∆∞·ªüng", fiction, 1),
                createCategory("L·ªãch s·ª≠", "S√°ch v·ªÅ l·ªãch s·ª≠", nonFiction, 1),
                createCategory("Khoa h·ªçc", "S√°ch khoa h·ªçc", nonFiction, 1),
                createCategory("T·ª± truy·ªán", "S√°ch t·ª± truy·ªán", nonFiction, 1),
                createCategory("S√°ch gi√°o khoa", "S√°ch gi√°o khoa c√°c c·∫•p", education, 1),
                createCategory("T·ª´ ƒëi·ªÉn", "T·ª´ ƒëi·ªÉn c√°c lo·∫°i", education, 1),
                createCategory("Truy·ªán tranh", "Truy·ªán tranh thi·∫øu nhi", children, 1),
                createCategory("S√°ch t√¥ m√†u", "S√°ch t√¥ m√†u cho tr·∫ª", children, 1),
                createCategory("Marketing", "S√°ch v·ªÅ marketing", business, 1),
                createCategory("Qu·∫£n l√Ω", "S√°ch v·ªÅ qu·∫£n l√Ω", business, 1)
        );
        categoryRepository.saveAll(subCategories);
    }

    private Category createCategory(String name, String description, Category parent, Integer createdBy) {
        Category category = new Category();
        category.setCategoryName(name);
        category.setDescription(description);
        category.setParentCategory(parent);
        category.setCreatedBy(createdBy);
        category.setStatus((byte) 1);
        return category;
    }

    private void initializeAuthors() {
        log.info("Initializing authors...");
        List<Author> authors = Arrays.asList(
                createAuthor("Nguy·ªÖn Nh·∫≠t √Ånh", "Nh√† vƒÉn Vi·ªát Nam n·ªïi ti·∫øng v·ªõi c√°c t√°c ph·∫©m thi·∫øu nhi", LocalDate.of(1955, 5, 7)),
                createAuthor("T√¥ Ho√†i", "Nh√† vƒÉn Vi·ªát Nam v·ªõi t√°c ph·∫©m D·∫ø M√®n phi√™u l∆∞u k√Ω", LocalDate.of(1920, 9, 27)),
                createAuthor("Nam Cao", "Nh√† vƒÉn hi·ªán th·ª±c Vi·ªát Nam", LocalDate.of(1915, 10, 29)),
                createAuthor("V≈© Tr·ªçng Phung", "Nh√† vƒÉn hi·ªán th·ª±c ph√™ ph√°n", LocalDate.of(1912, 10, 20)),
                createAuthor("Haruki Murakami", "Ti·ªÉu thuy·∫øt gia Nh·∫≠t B·∫£n", LocalDate.of(1949, 1, 12)),
                createAuthor("Agatha Christie", "N·ªØ ho√†ng trinh th√°m", LocalDate.of(1890, 9, 15)),
                createAuthor("Stephen King", "Vua ti·ªÉu thuy·∫øt kinh d·ªã", LocalDate.of(1947, 9, 21)),
                createAuthor("J.K. Rowling", "T√°c gi·∫£ Harry Potter", LocalDate.of(1965, 7, 31)),
                createAuthor("Dale Carnegie", "T√°c gi·∫£ s√°ch self-help", LocalDate.of(1888, 11, 24)),
                createAuthor("Napoleon Hill", "T√°c gi·∫£ Think and Grow Rich", LocalDate.of(1883, 10, 26))
        );
        authorRepository.saveAll(authors);
    }

    private Author createAuthor(String name, String biography, LocalDate birthDate) {
        Author author = new Author();
        author.setAuthorName(name);
        author.setBiography(biography);
        author.setBirthDate(birthDate);
        author.setCreatedBy(1);
        author.setStatus((byte) 1);
        return author;
    }

    private void initializeSuppliers() {
        log.info("Initializing suppliers...");
        List<Supplier> suppliers = Arrays.asList(
                createSupplier("NXB Kim ƒê·ªìng", "Nguy·ªÖn VƒÉn A", "0123456789", "kimDong@publisher.vn", "H√† N·ªôi"),
                createSupplier("NXB Tr·∫ª", "Tr·∫ßn Th·ªã B", "0123456788", "tre@publisher.vn", "TP.HCM"),
                createSupplier("NXB VƒÉn h·ªçc", "L√™ VƒÉn C", "0123456787", "vanhoc@publisher.vn", "H√† N·ªôi"),
                createSupplier("NXB Gi√°o d·ª•c", "Ph·∫°m Th·ªã D", "0123456786", "giaoduc@publisher.vn", "H√† N·ªôi"),
                createSupplier("Fahasa", "Ho√†ng VƒÉn E", "0123456785", "fahasa@bookstore.vn", "TP.HCM"),
                createSupplier("Vinabook", "Ng√¥ Th·ªã F", "0123456784", "vinabook@bookstore.vn", "H√† N·ªôi")
        );
        supplierRepository.saveAll(suppliers);
    }

    private Supplier createSupplier(String name, String contactName, String phone, String email, String address) {
        Supplier supplier = new Supplier();
        supplier.setSupplierName(name);
        supplier.setContactName(contactName);
        supplier.setPhoneNumber(phone);
        supplier.setEmail(email);
        supplier.setAddress(address);
        supplier.setStatus((byte) 1);
        supplier.setCreatedBy("system"); // Required field
        return supplier;
    }

    private void initializePublishers() {
        log.info("Initializing publishers...");
        List<Publisher> publishers = Arrays.asList(
                createPublisher("NXB Kim ƒê·ªìng", "55 Quang Trung, Hai B√† Tr∆∞ng, H√† N·ªôi", "contact@kimdong.com.vn", "024-3971-0999", "https://nxbkimdong.com.vn", "Nh√† xu·∫•t b·∫£n chuy√™n v·ªÅ s√°ch thi·∫øu nhi", 1954),
                createPublisher("NXB Tr·∫ª", "161B L√Ω Ch√≠nh Th·∫Øng, Qu·∫≠n 3, TP.HCM", "contact@nxbtre.com.vn", "028-3930-5001", "https://nxbtre.com.vn", "Nh√† xu·∫•t b·∫£n chuy√™n v·ªÅ s√°ch gi√°o d·ª•c v√† vƒÉn h·ªçc", 1981),
                createPublisher("NXB VƒÉn h·ªçc", "18 Nguy·ªÖn Tr∆∞·ªùng T·ªô, Ba ƒê√¨nh, H√† N·ªôi", "contact@nxbvanhoc.vn", "024-3825-4091", "https://nxbvanhoc.vn", "Chuy√™n xu·∫•t b·∫£n vƒÉn h·ªçc trong n∆∞·ªõc v√† n∆∞·ªõc ngo√†i", 1957),
                createPublisher("NXB Gi√°o d·ª•c Vi·ªát Nam", "81 Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm, H√† N·ªôi", "contact@nxbgd.vn", "024-3822-5340", "https://nxbgiaoduc.vn", "Nh√† xu·∫•t b·∫£n s√°ch gi√°o khoa v√† gi√°o tr√¨nh", 1957),
                createPublisher("NXB Th√¥ng tin v√† Truy·ªÅn th√¥ng", "115 Tr·∫ßn Duy H∆∞ng, C·∫ßu Gi·∫•y, H√† N·ªôi", "contact@nxbtttt.vn", "024-3568-8244", "https://nxbtttt.vn", "Chuy√™n v·ªÅ s√°ch c√¥ng ngh·ªá th√¥ng tin", 2008),
                createPublisher("NXB Lao ƒë·ªông", "175 Gi·∫£ng V√µ, ƒê·ªëng ƒêa, H√† N·ªôi", "contact@nxblaodong.vn", "024-3851-3341", "https://nxblaodong.vn", "Nh√† xu·∫•t b·∫£n v·ªÅ lao ƒë·ªông v√† x√£ h·ªôi", 1958)
        );
        publisherRepository.saveAll(publishers);
    }

    private Publisher createPublisher(String name, String address, String email, String phone, String website, String description, Integer establishedYear) {
        Publisher publisher = new Publisher();
        publisher.setPublisherName(name);
        publisher.setAddress(address);
        publisher.setEmail(email);
        publisher.setPhoneNumber(phone);
        publisher.setWebsite(website);
        publisher.setDescription(description);
        publisher.setEstablishedYear(establishedYear);
        publisher.setStatus((byte) 1);
        publisher.setCreatedBy(1);
        publisher.setUpdatedBy(1);
        return publisher;
    }

    private void initializeBooks() {
        log.info("Initializing books...");

        List<Category> categories = categoryRepository.findAll();
        List<Supplier> suppliers = supplierRepository.findAll();
        List<Publisher> publishers = publisherRepository.findAll();

        // T·∫°o timestamp cho c√°c nƒÉm xu·∫•t b·∫£n (milliseconds since Unix epoch)
        long year2010 = 1262304000000L; // 2010-01-01
        long year1941 = -915148800000L; // 1941-01-01
        long year1987 = 536457600000L;  // 1987-01-01
        long year1934 = -1136073600000L; // 1934-01-01
        long year1997_june26 = 867283200000L; // 1997-06-26
        long year1936 = -1073001600000L; // 1936-01-01
        long year1937 = -1041379200000L; // 1937-01-01
        long year2020 = 1577836800000L; // 2020-01-01
        long year2018 = 1514764800000L; // 2018-01-01
        long year1970 = 0L; // 1970-01-01
        long year2017 = 1483228800000L; // 2017-01-01

        List<Book> books = Arrays.asList(
                createBook("T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh", "Ti·ªÉu thuy·∫øt c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh",
                        new BigDecimal("85000"), 100, year2010,
                        findCategoryByName(categories, "Ti·ªÉu thuy·∫øt"), suppliers.get(0),
                        findPublisherByName(publishers, "NXB Tr·∫ª"), 1),
                createBook("D·∫ø M√®n phi√™u l∆∞u k√Ω", "T√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa T√¥ Ho√†i",
                        new BigDecimal("65000"), 150, year1941,
                        findCategoryByName(categories, "Thi·∫øu nhi"), suppliers.get(0),
                        findPublisherByName(publishers, "NXB Kim ƒê·ªìng"), 1),
                createBook("Ch√≠ Ph√®o", "Truy·ªán ng·∫Øn c·ªßa Nam Cao",
                        new BigDecimal("45000"), 200, year1941,
                        findCategoryByName(categories, "Ti·ªÉu thuy·∫øt"), suppliers.get(2),
                        findPublisherByName(publishers, "NXB VƒÉn h·ªçc"), 1),
                createBook("Norwegian Wood", "Ti·ªÉu thuy·∫øt c·ªßa Haruki Murakami",
                        new BigDecimal("120000"), 80, year1987,
                        findCategoryByName(categories, "L√£ng m·∫°n"), suppliers.get(1),
                        findPublisherByName(publishers, "NXB Tr·∫ª"), 1),
                createBook("Murder on the Orient Express", "Ti·ªÉu thuy·∫øt trinh th√°m c·ªßa Agatha Christie",
                        new BigDecimal("95000"), 90, year1934,
                        findCategoryByName(categories, "Trinh th√°m"), suppliers.get(4),
                        findPublisherByName(publishers, "NXB VƒÉn h·ªçc"), 1),
                createBook("Harry Potter v√† H√≤n ƒë√° Ph√π th·ªßy", "T·∫≠p 1 series Harry Potter",
                        new BigDecimal("150000"), 120, year1997_june26,
                        findCategoryByName(categories, "Khoa h·ªçc vi·ªÖn t∆∞·ªüng"), suppliers.get(1),
                        findPublisherByName(publishers, "NXB Tr·∫ª"), 1),
                createBook("ƒê·∫Øc Nh√¢n T√¢m", "S√°ch self-help c·ªßa Dale Carnegie",
                        new BigDecimal("89000"), 300, year1936,
                        findCategoryByName(categories, "Kinh doanh"), suppliers.get(4),
                        findPublisherByName(publishers, "NXB Lao ƒë·ªông"), 1),
                createBook("Think and Grow Rich", "S√°ch v·ªÅ th√†nh c√¥ng c·ªßa Napoleon Hill",
                        new BigDecimal("79000"), 180, year1937,
                        findCategoryByName(categories, "Kinh doanh"), suppliers.get(5),
                        findPublisherByName(publishers, "NXB Lao ƒë·ªông"), 1),
                createBook("To√°n h·ªçc l·ªõp 12", "S√°ch gi√°o khoa To√°n 12",
                        new BigDecimal("25000"), 500, year2020,
                        findCategoryByName(categories, "S√°ch gi√°o khoa"), suppliers.get(3),
                        findPublisherByName(publishers, "NXB Gi√°o d·ª•c Vi·ªát Nam"), 1),
                createBook("T·ª´ ƒëi·ªÉn Anh - Vi·ªát", "T·ª´ ƒëi·ªÉn Anh Vi·ªát c∆° b·∫£n",
                        new BigDecimal("135000"), 250, year2018,
                        findCategoryByName(categories, "T·ª´ ƒëi·ªÉn"), suppliers.get(3),
                        findPublisherByName(publishers, "NXB Gi√°o d·ª•c Vi·ªát Nam"), 1),
                createBook("Doraemon t·∫≠p 1", "Truy·ªán tranh Doraemon",
                        new BigDecimal("18000"), 400, year1970,
                        findCategoryByName(categories, "Truy·ªán tranh"), suppliers.get(0),
                        findPublisherByName(publishers, "NXB Kim ƒê·ªìng"), 1),
                createBook("Marketing 4.0", "S√°ch v·ªÅ marketing hi·ªán ƒë·∫°i",
                        new BigDecimal("189000"), 100, year2017,
                        findCategoryByName(categories, "Marketing"), suppliers.get(4),
                        findPublisherByName(publishers, "NXB Th√¥ng tin v√† Truy·ªÅn th√¥ng"), 1)
        );
        bookRepository.saveAll(books);
    }

    private Book createBook(String name, String description, BigDecimal price, Integer stock,
                            Long publicationDate, Category category, Supplier supplier, Publisher publisher, Integer createdBy) {
        Book book = new Book();
        book.setBookName(name);
        book.setDescription(description);
        book.setPrice(price);
        book.setStockQuantity(stock);
        book.setPublicationDate(publicationDate);
        book.setCategory(category);
        book.setSupplier(supplier);
        book.setPublisher(publisher);
        book.setCreatedBy(createdBy);
        book.setBookCode("BOOK" + System.currentTimeMillis());
        book.setStatus((byte) 1);
        // Th√™m d·ªØ li·ªáu m·∫´u cho images (nhi·ªÅu ·∫£nh, c√°ch nhau b·∫±ng d·∫•u ph·∫©y)
        book.setImages("https://yourdomain.com/uploads/products/sample1.jpg,https://yourdomain.com/uploads/products/sample2.jpg");
        return book;
    }

    private Category findCategoryByName(List<Category> categories, String name) {
        return categories.stream()
                .filter(cat -> cat.getCategoryName().equals(name))
                .findFirst()
                .orElse(categories.get(0));
    }

    private Publisher findPublisherByName(List<Publisher> publishers, String name) {
        return publishers.stream()
                .filter(pub -> pub.getPublisherName().equals(name))
                .findFirst()
                .orElse(publishers.get(0));
    }

    private void initializeAuthorBooks() {
        log.info("Initializing author-book relationships...");

        List<Book> books = bookRepository.findAll();
        List<Author> authors = authorRepository.findAll();

        // T·∫°o m·ªëi quan h·ªá t√°c gi·∫£ - s√°ch
        createAuthorBook(findBookByName(books, "T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh"), findAuthorByName(authors, "Nguy·ªÖn Nh·∫≠t √Ånh"));
        createAuthorBook(findBookByName(books, "D·∫ø M√®n phi√™u l∆∞u k√Ω"), findAuthorByName(authors, "T√¥ Ho√†i"));
        createAuthorBook(findBookByName(books, "Ch√≠ Ph√®o"), findAuthorByName(authors, "Nam Cao"));
        createAuthorBook(findBookByName(books, "Norwegian Wood"), findAuthorByName(authors, "Haruki Murakami"));
        createAuthorBook(findBookByName(books, "Murder on the Orient Express"), findAuthorByName(authors, "Agatha Christie"));
        createAuthorBook(findBookByName(books, "Harry Potter v√† H√≤n ƒë√° Ph√π th·ªßy"), findAuthorByName(authors, "J.K. Rowling"));
        createAuthorBook(findBookByName(books, "ƒê·∫Øc Nh√¢n T√¢m"), findAuthorByName(authors, "Dale Carnegie"));
        createAuthorBook(findBookByName(books, "Think and Grow Rich"), findAuthorByName(authors, "Napoleon Hill"));
    }

    private void createAuthorBook(Book book, Author author) {
        if (book != null && author != null) {
            AuthorBook authorBook = new AuthorBook();
            AuthorBookId id = new AuthorBookId();
            id.setBookId(book.getId());
            id.setAuthorId(author.getId());
            authorBook.setId(id);
            authorBook.setBook(book);
            authorBook.setAuthor(author);
            authorBookRepository.save(authorBook);
        }
    }

    private Book findBookByName(List<Book> books, String name) {
        return books.stream()
                .filter(book -> book.getBookName().equals(name))
                .findFirst()
                .orElse(null);
    }

    private Author findAuthorByName(List<Author> authors, String name) {
        return authors.stream()
                .filter(author -> author.getAuthorName().equals(name))
                .findFirst()
                .orElse(null);
    }

    private void initializeVouchers() {
        log.info("Initializing vouchers...");

        long currentTime = System.currentTimeMillis();
        long oneMonth = 30L * 24 * 60 * 60 * 1000; // 30 ng√†y

        List<Voucher> vouchers = Arrays.asList(
                createVoucher("WELCOME", "Voucher ch√†o m·ª´ng", "Gi·∫£m 15% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n, t·ªëi ƒëa 50K",
                        VoucherCategory.NORMAL, DiscountType.PERCENTAGE, new BigDecimal("15"), null,
                        currentTime, currentTime + oneMonth, new BigDecimal("100000"), new BigDecimal("50000"), 100, 1, "admin"),
                createVoucher("WELCOME10", "Voucher ch√†o m·ª´ng", "Gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n",
                        VoucherCategory.NORMAL, DiscountType.PERCENTAGE, new BigDecimal("10"), null,
                        currentTime, currentTime + oneMonth, new BigDecimal("100000"), new BigDecimal("50000"), 100, 1, "admin"),
                createVoucher("SAVE50K", "Voucher gi·∫£m 50K", "Gi·∫£m 50.000ƒë cho ƒë∆°n t·ª´ 500K",
                        VoucherCategory.NORMAL, DiscountType.FIXED_AMOUNT, null, new BigDecimal("50000"),
                        currentTime, currentTime + oneMonth, new BigDecimal("500000"), null, 50, 1, "admin"),
                createVoucher("FREESHIP", "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn", "Mi·ªÖn ph√≠ ship cho ƒë∆°n t·ª´ 200K",
                        VoucherCategory.SHIPPING, DiscountType.FIXED_AMOUNT, null, null,
                        currentTime, currentTime + oneMonth, new BigDecimal("200000"), null, 200, 1, "admin"),
                createVoucher("SUMMER20", "Voucher h√®", "Gi·∫£m 20% t·ªëi ƒëa 100K",
                        VoucherCategory.NORMAL, DiscountType.PERCENTAGE, new BigDecimal("20"), null,
                        currentTime, currentTime + oneMonth, new BigDecimal("300000"), new BigDecimal("100000"), 75, 1, "admin"),
                createVoucher("NEWBIE15", "Voucher th√†nh vi√™n m·ªõi", "Gi·∫£m 15% cho kh√°ch h√†ng m·ªõi",
                        VoucherCategory.NORMAL, DiscountType.PERCENTAGE, new BigDecimal("15"), null,
                        currentTime, currentTime + oneMonth, new BigDecimal("150000"), new BigDecimal("75000"), 150, 1, "admin")
        );
        voucherRepository.saveAll(vouchers);
    }

    private Voucher createVoucher(String code, String name, String description, VoucherCategory category, DiscountType discountType,
                                  BigDecimal discountPercentage, BigDecimal discountAmount,
                                  Long startTime, Long endTime, BigDecimal minOrderValue,
                                  BigDecimal maxDiscountValue, Integer usageLimit,
                                  Integer usageLimitPerUser, String createdBy) {
        Voucher voucher = new Voucher();
        voucher.setCode(code);
        voucher.setName(name);
        voucher.setDescription(description);
        voucher.setVoucherCategory(category);
        voucher.setDiscountType(discountType);
        voucher.setDiscountPercentage(discountPercentage);
        voucher.setDiscountAmount(discountAmount);
        voucher.setStartTime(startTime);
        voucher.setEndTime(endTime);
        voucher.setMinOrderValue(minOrderValue);
        voucher.setMaxDiscountValue(maxDiscountValue);
        voucher.setUsageLimit(usageLimit);
        voucher.setUsedCount(0);
        voucher.setUsageLimitPerUser(usageLimitPerUser);
        voucher.setCreatedBy(createdBy);
        voucher.setStatus((byte) 1);
        return voucher;
    }

    private void initializeUserVouchers() {
        log.info("Initializing user vouchers...");

        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Voucher> vouchers = voucherRepository.findAll();

        // G√°n m·ªôt s·ªë voucher cho kh√°ch h√†ng
        for (User customer : customers.subList(0, Math.min(3, customers.size()))) {
            for (Voucher voucher : vouchers.subList(0, Math.min(2, vouchers.size()))) {
                UserVoucher userVoucher = new UserVoucher();
                userVoucher.setUser(customer);
                userVoucher.setVoucher(voucher);
                userVoucher.setUsedCount(0);
                userVoucherRepository.save(userVoucher);
            }
        }
    }

    private void initializeFlashSales() {
        log.info("Initializing flash sales...");

        long currentTime = System.currentTimeMillis();
        long oneWeek = 7L * 24 * 60 * 60 * 1000;

        // T·∫°o Flash Sale
        FlashSale flashSale = FlashSale.builder()
                .name("Flash Sale Cu·ªëi Tu·∫ßn")
                .startTime(currentTime)
                .endTime(currentTime + oneWeek)
                .createdBy(1L)
                .status((byte) 1)
                .build();
        flashSaleRepository.save(flashSale);

        // T·∫°o Flash Sale Items
        List<Book> books = bookRepository.findAll();
        for (Book book : books.subList(0, Math.min(5, books.size()))) {
            FlashSaleItem item = FlashSaleItem.builder()
                    .flashSale(flashSale)
                    .book(book)
                    .discountPrice(book.getPrice().multiply(new BigDecimal("0.8"))) // Gi·∫£m 20%
                    .discountPercentage(new BigDecimal("20"))
                    .stockQuantity(20)
                    .maxPurchasePerUser(5)
                    .createdBy(1L)
                    .status((byte) 1)
                    .build();
            flashSaleItemRepository.save(item);
        }
    }

    // ============== DISABLED ADDRESS INITIALIZATION METHODS ==============
    // These methods are commented out to prevent automatic address data creation
    
    /*
    private void initializeAddresses() {
        log.info("Initializing addresses...");
        
        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        
        for (int i = 0; i < customers.size(); i++) {
            User customer = customers.get(i);
            Address address = createAddress(customer, customer.getFullName(), 
                "ƒê·ªãa ch·ªâ " + (i + 1) + ", Ph∆∞·ªùng " + (i + 1) + ", Qu·∫≠n " + (i + 1) + ", TP.HCM", 
                "0123456789", i == 0);
            addressRepository.save(address);
        }
    }

    private Address createAddress(User user, String recipientName, String addressDetail, 
                                String phoneNumber, Boolean isDefault) {
        Address address = new Address();
        address.setUser(user);
        address.setRecipientName(recipientName);
        address.setAddressDetail(addressDetail);
        address.setPhoneNumber(phoneNumber);
        address.setIsDefault(isDefault);
        address.setCreatedBy(user.getId());
        address.setStatus((byte) 1);
        return address;
    }
    */

    private void initializeCarts() {
        log.info("Initializing carts...");

        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Book> books = bookRepository.findAll();

        for (User customer : customers) {
            Cart cart = new Cart();
            cart.setUser(customer);
            cart.setCreatedBy(customer.getId());
            cart.setStatus((byte) 1);
            cartRepository.save(cart);

            // Th√™m m·ªôt s·ªë item v√†o cart
            for (int i = 0; i < Math.min(3, books.size()); i++) {
                CartItem item = new CartItem();
                item.setCart(cart);
                item.setBook(books.get(i));
                item.setQuantity(i + 1);
                item.setCreatedBy(customer.getId());
                item.setStatus((byte) 1);
                item.setSelected(true);
                cartItemRepository.save(item);
            }
        }
    }

    // ============== DISABLED ORDER INITIALIZATION METHODS ==============
    // These methods are commented out to prevent automatic order data creation
    
    /*
    private void initializeOrders() {
        log.info("Initializing orders...");
        
        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Book> books = bookRepository.findAll();
        List<Address> addresses = addressRepository.findAll();
        
        // T·∫°o ƒë∆°n h√†ng DELIVERED cho 3 kh√°ch h√†ng ƒë·∫ßu
        for (int i = 0; i < Math.min(3, customers.size()); i++) {
            User customer = customers.get(i);
            Address address = addresses.stream()
                    .filter(addr -> addr.getUser().equals(customer))
                    .findFirst()
                    .orElse(addresses.get(0));
            
            Order order = createOrder(customer, address, OrderStatus.DELIVERED, "ONLINE");
            orderRepository.save(order);
            
            // T·∫°o order details
            BigDecimal subtotal = BigDecimal.ZERO;
            for (int j = 0; j < Math.min(2, books.size()); j++) {
                Book book = books.get(j);
                int quantity = j + 1;
                BigDecimal unitPrice = book.getPrice();
                
                OrderDetail detail = createOrderDetail(order, book, quantity, unitPrice);
                orderDetailRepository.save(detail);
                
                subtotal = subtotal.add(unitPrice.multiply(BigDecimal.valueOf(quantity)));
            }
            
            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
            order.setSubtotal(subtotal);
            order.setTotalAmount(subtotal.add(order.getShippingFee()));
            orderRepository.save(order);
        }
        
        // ‚úÖ TH√äM M·ªöI: T·∫°o ƒë∆°n h√†ng v·ªõi c√°c tr·∫°ng th√°i ho√†n h√†ng ƒë·ªÉ test
        if (customers.size() >= 2 && books.size() >= 2) {
            User testCustomer = customers.get(0); // L√™ VƒÉn C (customer1@gmail.com)
            Address testAddress = addresses.stream()
                    .filter(addr -> addr.getUser().equals(testCustomer))
                    .findFirst()
                    .orElse(addresses.get(0));
            
            // 1. ƒê∆°n h√†ng ƒëang ch·ªù admin xem x√©t y√™u c·∫ßu ho√†n tr·∫£
            Order refundRequestedOrder = createOrder(testCustomer, testAddress, OrderStatus.REFUND_REQUESTED, "ONLINE");
            refundRequestedOrder.setCancelReason("Kh√°ch h√†ng y√™u c·∫ßu ho√†n tr·∫£ v√¨ s·∫£n ph·∫©m kh√¥ng ƒë√∫ng m√¥ t·∫£");
            orderRepository.save(refundRequestedOrder);
            
            // Th√™m order details cho ƒë∆°n REFUND_REQUESTED
            Book book1 = books.get(0);
            OrderDetail detail1 = createOrderDetail(refundRequestedOrder, book1, 2, book1.getPrice());
            orderDetailRepository.save(detail1);
            
            BigDecimal subtotal1 = book1.getPrice().multiply(BigDecimal.valueOf(2));
            refundRequestedOrder.setSubtotal(subtotal1);
            refundRequestedOrder.setTotalAmount(subtotal1.add(refundRequestedOrder.getShippingFee()));
            orderRepository.save(refundRequestedOrder);
            
            // 2. ƒê∆°n h√†ng ƒëang trong qu√° tr√¨nh ho√†n ti·ªÅn
            Order refundingOrder = createOrder(testCustomer, testAddress, OrderStatus.REFUNDING, "ONLINE");
            refundingOrder.setCancelReason("Admin ƒë√£ ch·∫•p nh·∫≠n y√™u c·∫ßu ho√†n tr·∫£, ƒëang x·ª≠ l√Ω ho√†n ti·ªÅn");
            orderRepository.save(refundingOrder);
            
            // Th√™m order details cho ƒë∆°n REFUNDING
            Book book2 = books.get(1);
            OrderDetail detail2 = createOrderDetail(refundingOrder, book2, 1, book2.getPrice());
            orderDetailRepository.save(detail2);
            
            BigDecimal subtotal2 = book2.getPrice();
            refundingOrder.setSubtotal(subtotal2);
            refundingOrder.setTotalAmount(subtotal2.add(refundingOrder.getShippingFee()));
            orderRepository.save(refundingOrder);
            
            // 3. ƒê∆°n h√†ng ƒë√£ ho√†n ti·ªÅn ho√†n t·∫•t
            Order refundedOrder = createOrder(testCustomer, testAddress, OrderStatus.REFUNDED, "ONLINE");
            refundedOrder.setCancelReason("ƒê√£ ho√†n tr·∫£ th√†nh c√¥ng cho kh√°ch h√†ng");
            orderRepository.save(refundedOrder);
            
            // Th√™m order details cho ƒë∆°n REFUNDED
            Book book3 = books.size() > 2 ? books.get(2) : books.get(0);
            OrderDetail detail3 = createOrderDetail(refundedOrder, book3, 1, book3.getPrice());
            orderDetailRepository.save(detail3);
            
            BigDecimal subtotal3 = book3.getPrice();
            refundedOrder.setSubtotal(subtotal3);
            refundedOrder.setTotalAmount(subtotal3.add(refundedOrder.getShippingFee()));
            orderRepository.save(refundedOrder);
            
            log.info("Created test orders with refund statuses: REFUND_REQUESTED, REFUNDING, REFUNDED");
        }
    }

    /*
    private Order createOrder(User customer, Address address, OrderStatus status, String orderType) {
        Order order = new Order();
        order.setUser(customer);
        order.setAddress(address);
        order.setOrderDate(System.currentTimeMillis());
        order.setSubtotal(BigDecimal.ZERO);
        order.setShippingFee(new BigDecimal("30000"));
        order.setDiscountAmount(BigDecimal.ZERO);
        order.setDiscountShipping(BigDecimal.ZERO);
        order.setTotalAmount(BigDecimal.ZERO);
        order.setOrderStatus(status);
        order.setOrderType(orderType);
        order.setCode("ORD" + System.currentTimeMillis());
        order.setCreatedBy(customer.getId());
        order.setStatus((byte) 1);
        return order;
    }

    private OrderDetail createOrderDetail(Order order, Book book, Integer quantity, BigDecimal unitPrice) {
        OrderDetail detail = new OrderDetail();
        OrderDetailId id = new OrderDetailId();
        id.setOrderId(order.getId());
        id.setBookId(book.getId());
        detail.setId(id);
        detail.setOrder(order);
        detail.setBook(book);
        detail.setQuantity(quantity);
        detail.setUnitPrice(unitPrice);
        detail.setCreatedBy(order.getCreatedBy());
        return detail;
    }
    */

    @Transactional
    private void initializePoints() {
        log.info("Initializing points...");

        List<Order> orders = orderRepository.findAll();

        for (Order order : orders) {
            if (order.getOrderStatus() == OrderStatus.DELIVERED) {
                Point point = new Point();
                point.setUser(order.getUser());
                point.setOrder(order);
                // Gi·ªõi h·∫°n ƒëi·ªÉm t·ªëi ƒëa 100 ƒëi·ªÉm m·ªói ƒë∆°n h√†ng ƒë·ªÉ tr√°nh overflow
                int pointsToEarn = Math.min(100, (int) (order.getTotalAmount().doubleValue() / 1000));
                point.setPointEarned(pointsToEarn);
                point.setMinSpent(order.getTotalAmount());
                point.setPointSpent(0);
                point.setDescription("T√≠ch ƒëi·ªÉm t·ª´ ƒë∆°n h√†ng " + order.getCode());
                point.setCreatedAt(System.currentTimeMillis());
                point.setStatus((byte) 1);
                pointRepository.save(point);

                // C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm cho user - fetch user explicitly to avoid lazy loading
                User user = userRepository.findById(order.getUser().getId()).orElse(null);
                if (user != null) {
                    int currentTotalPoint = user.getTotalPoint() != null ? user.getTotalPoint() : 0;
                    int newTotalPoint = Math.min(999999, currentTotalPoint + pointsToEarn); // Gi·ªõi h·∫°n t·ªïng ƒëi·ªÉm < 1 tri·ªáu
                    user.setTotalPoint(newTotalPoint);

                    BigDecimal currentTotalSpent = user.getTotalSpent() != null ? user.getTotalSpent() : BigDecimal.ZERO;
                    BigDecimal newTotalSpent = currentTotalSpent.add(order.getTotalAmount());
                    // Gi·ªõi h·∫°n t·ªïng chi ti√™u < 100 tri·ªáu ƒë·ªÉ tr√°nh overflow
                    if (newTotalSpent.compareTo(new BigDecimal("99999999")) <= 0) {
                        user.setTotalSpent(newTotalSpent);
                    }
                    userRepository.save(user);
                }
            }
        }
    }

    private void initializeReviews() {
        log.info("Initializing reviews...");

        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Book> books = bookRepository.findAll();

        String[] positiveComments = {
                "S√°ch r·∫•t hay, n·ªôi dung h·∫•p d·∫´n!",
                "Ch·∫•t l∆∞·ª£ng t·ªët, giao h√†ng nhanh.",
                "N·ªôi dung phong ph√∫, ƒë√°ng ƒë·ªçc.",
                "S√°ch in ƒë·∫πp, gi√° c·∫£ h·ª£p l√Ω.",
                "R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y.",
                "ƒê·ªçc xong th·∫•y r·∫•t b·ªï √≠ch!",
                "Recommend cho m·ªçi ng∆∞·ªùi!",
                "T√°c gi·∫£ vi·∫øt r·∫•t hay v√† d·ªÖ hi·ªÉu."
        };

        String[] negativeComments = {
                "N·ªôi dung kh√¥ng nh∆∞ mong ƒë·ª£i.",
                "Giao h√†ng h∆°i ch·∫≠m.",
                "Ch·∫•t l∆∞·ª£ng b√¨nh th∆∞·ªùng th√¥i.",
                "Gi√° h∆°i cao so v·ªõi ch·∫•t l∆∞·ª£ng."
        };

        // T·∫°o review cho t·ª´ng s√°ch v·ªõi t·ªâ l·ªá t√≠ch c·ª±c kh√°c nhau
        for (int bookIndex = 0; bookIndex < books.size(); bookIndex++) {
            Book book = books.get(bookIndex);

            // T·∫°o 3-6 review cho m·ªói s√°ch ƒë·ªÉ c√≥ ƒë·ªß d·ªØ li·ªáu test (kh√¥ng ph·ª• thu·ªôc s·ªë customers)
            int reviewCount = 3 + (bookIndex % 4); // 3-6 reviews

            for (int i = 0; i < reviewCount; i++) {
                // S·ª≠ d·ª•ng customers theo ki·ªÉu circular ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi s√°ch ƒë·ªÅu c√≥ review
                User customer = customers.get(i % customers.size());

                // T·ªâ l·ªá t√≠ch c·ª±c kh√°c nhau cho t·ª´ng s√°ch ƒë·ªÉ test API
                boolean isPositive;
                int rating;
                String comment;

                // ‚úÖ ƒê·∫∂C BI·ªÜT: Marketing 4.0 c√≥ 100% ƒë√°nh gi√° t√≠ch c·ª±c
                if (book.getBookName().equals("Marketing 4.0")) {
                    isPositive = true; // 100% t√≠ch c·ª±c
                    rating = 5; // T·∫•t c·∫£ ƒë·ªÅu 5 sao
                    comment = positiveComments[i % positiveComments.length];
                } else if (bookIndex < 7) {
                    // 7 s√°ch ƒë·∫ßu c√≥ t·ªâ l·ªá t√≠ch c·ª±c cao (>= 75%)
                    isPositive = (i < reviewCount * 0.85); // 85% t√≠ch c·ª±c
                    rating = isPositive ? (4 + (i % 2)) : (2 + (i % 2)); // 4-5 ho·∫∑c 2-3
                    comment = isPositive ? positiveComments[i % positiveComments.length]
                            : negativeComments[i % negativeComments.length];
                } else if (bookIndex < 10) {
                    // 3 s√°ch ti·∫øp theo c√≥ t·ªâ l·ªá t√≠ch c·ª±c v·ª´a ph·∫£i (50-70%)
                    isPositive = (i < reviewCount * 0.6); // 60% t√≠ch c·ª±c
                    rating = isPositive ? (3 + (i % 2)) : (2 + (i % 2)); // 3-4 ho·∫∑c 2-3
                    comment = isPositive ? positiveComments[i % positiveComments.length]
                            : negativeComments[i % negativeComments.length];
                } else {
                    // S√°ch c√≤n l·∫°i c√≥ t·ªâ l·ªá t√≠ch c·ª±c th·∫•p (<50%)
                    isPositive = (i < reviewCount * 0.3); // 30% t√≠ch c·ª±c
                    rating = isPositive ? (3 + (i % 2)) : (1 + (i % 2)); // 3-4 ho·∫∑c 1-2
                    comment = isPositive ? positiveComments[i % positiveComments.length]
                            : negativeComments[i % negativeComments.length];
                }

                Review review = Review.builder()
                        .book(book)
                        .user(customer)
                        .rating(rating)
                        .comment(comment)
                        .isPositive(isPositive) // ‚úÖ TH√äM: Thi·∫øt l·∫≠p isPositive
                        .reviewDate(System.currentTimeMillis() - (i * 24 * 60 * 60 * 1000L)) // T·∫°o th·ªùi gian kh√°c nhau
                        .reviewStatus(ReviewStatus.APPROVED)
                        .build();
                reviewRepository.save(review);
            }
        }
    }

    /**
     * Method ƒë·ªÉ reset to√†n b·ªô d·ªØ li·ªáu v√† kh·ªüi t·∫°o l·∫°i t·ª´ ƒë·∫ßu
     * CH·ªà S·ª¨ D·ª§NG TRONG M√îI TR∆Ø·ªúNG DEVELOPMENT/TEST
     */
    @Transactional
    public void forceReinitializeData() {
        log.warn("FORCE RE-INITIALIZING ALL DATA - THIS WILL DELETE ALL EXISTING DATA!");

        try {
            // X√≥a d·ªØ li·ªáu theo th·ª© t·ª± dependency (t·ª´ con ƒë·∫øn cha)
            reviewRepository.deleteAll();
            pointRepository.deleteAll();
            orderDetailRepository.deleteAll();
            orderRepository.deleteAll();
            cartItemRepository.deleteAll();
            cartRepository.deleteAll();
            addressRepository.deleteAll();
            flashSaleItemRepository.deleteAll();
            flashSaleRepository.deleteAll();
            userVoucherRepository.deleteAll();
            voucherRepository.deleteAll();
            authorBookRepository.deleteAll();
            bookRepository.deleteAll();
            supplierRepository.deleteAll();
            authorRepository.deleteAll();
            categoryRepository.deleteAll();
            userRankRepository.deleteAll();
            userRepository.deleteAll();
            rankRepository.deleteAll();
            roleRepository.deleteAll();

            log.info("All data deleted successfully!");

            // Kh·ªüi t·∫°o l·∫°i d·ªØ li·ªáu
            initializeIfEmpty();

            log.info("Data reinitialization completed successfully!");
        } catch (Exception e) {
            log.error("Error during force reinitialization: ", e);
            throw e;
        }
    }

    /**
     * Method ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i d·ªØ li·ªáu hi·ªán t·∫°i
     */
    public void checkDataStatus() {
        log.info("=== DATA STATUS CHECK ===");
        log.info("Roles: {}", roleRepository.count());
        log.info("Ranks: {}", rankRepository.count());
        log.info("Users: {}", userRepository.count());
        log.info("User Ranks: {}", userRankRepository.count());
        log.info("Categories: {}", categoryRepository.count());
        log.info("Authors: {}", authorRepository.count());
        log.info("Suppliers: {}", supplierRepository.count());
        log.info("Books: {}", bookRepository.count());
        log.info("Author Books: {}", authorBookRepository.count());
        log.info("Vouchers: {}", voucherRepository.count());
        log.info("User Vouchers: {}", userVoucherRepository.count());
        log.info("Flash Sales: {}", flashSaleRepository.count());
        log.info("Flash Sale Items: {}", flashSaleItemRepository.count());
        log.info("Addresses: {} (initialization disabled)", addressRepository.count());
        log.info("Carts: {}", cartRepository.count());
        log.info("Cart Items: {}", cartItemRepository.count());
        log.info("Orders: {} (initialization disabled)", orderRepository.count());
        log.info("Order Details: {} (initialization disabled)", orderDetailRepository.count());
        log.info("Points: {} (initialization disabled)", pointRepository.count());
        log.info("Reviews: {}", reviewRepository.count());
        log.info("========================");
    }


    // ============== DISABLED TRENDING ORDER METHODS ==============
    /*
    /**
     * ‚úÖ TH√äM METHOD: T·∫°o th√™m d·ªØ li·ªáu ƒë∆°n h√†ng ƒë·ªÉ c√≥ s·∫£n ph·∫©m xu h∆∞·ªõng
     * T·∫°o nhi·ªÅu ƒë∆°n h√†ng trong 30 ng√†y qua v·ªõi s·ªë l∆∞·ª£ng kh√°c nhau cho c√°c s√°ch
     */
    /*
    private void initializeTrendingOrderData() {
        log.info("Initializing trending order data...");
        
        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Book> books = bookRepository.findAll();
        List<Address> addresses = addressRepository.findAll();
        
        if (customers.isEmpty() || books.isEmpty() || addresses.isEmpty()) {
            log.warn("Not enough data to create trending orders");
            return;
        }
        
        long currentTime = System.currentTimeMillis();
        long thirtyDaysAgo = currentTime - (30L * 24 * 60 * 60 * 1000); // 30 ng√†y tr∆∞·ªõc
        
        // T·∫°o orders cho c√°c s√°ch kh√°c nhau v·ªõi t·∫ßn su·∫•t kh√°c nhau ƒë·ªÉ m√¥ ph·ªèng trending
        int[] trendingPattern = {15, 12, 10, 8, 6, 4, 3, 2, 1, 1}; // S·ªë ƒë∆°n h√†ng cho t·ª´ng s√°ch
        
        for (int bookIndex = 0; bookIndex < Math.min(books.size(), trendingPattern.length); bookIndex++) {
            Book book = books.get(bookIndex);
            int orderCount = trendingPattern[bookIndex];
            
            // T·∫°o nhi·ªÅu ƒë∆°n h√†ng cho s√°ch n√†y trong 30 ng√†y qua
            for (int orderIndex = 0; orderIndex < orderCount; orderIndex++) {
                User customer = customers.get(orderIndex % customers.size());
                Address address = addresses.stream()
                        .filter(addr -> addr.getUser().equals(customer))
                        .findFirst()
                        .orElse(addresses.get(0));
                
                // Random th·ªùi gian trong 30 ng√†y qua
                long orderTime = thirtyDaysAgo + (long)(Math.random() * (currentTime - thirtyDaysAgo));
                
                Order order = createTrendingOrder(customer, address, OrderStatus.DELIVERED, "NORMAL", orderTime);
                orderRepository.save(order);
                
                // T·∫°o order detail v·ªõi s·ªë l∆∞·ª£ng random
                int quantity = 1 + (int)(Math.random() * 3); // 1-3 cu·ªën
                BigDecimal unitPrice = book.getPrice();
                
                OrderDetail detail = createOrderDetail(order, book, quantity, unitPrice);
                orderDetailRepository.save(detail);
                
                // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
                BigDecimal subtotal = unitPrice.multiply(BigDecimal.valueOf(quantity));
                order.setSubtotal(subtotal);
                order.setTotalAmount(subtotal.add(order.getShippingFee()));
                orderRepository.save(order);
                
                // Th√™m m·ªôt s·ªë ƒë∆°n h√†ng c√≥ nhi·ªÅu s√°ch
                if (orderIndex % 3 == 0 && bookIndex < books.size() - 1) {
                    Book secondBook = books.get(bookIndex + 1);
                    int secondQuantity = 1 + (int)(Math.random() * 2);
                    BigDecimal secondUnitPrice = secondBook.getPrice();
                    
                    OrderDetail secondDetail = createOrderDetail(order, secondBook, secondQuantity, secondUnitPrice);
                    orderDetailRepository.save(secondDetail);
                    
                    BigDecimal additionalAmount = secondUnitPrice.multiply(BigDecimal.valueOf(secondQuantity));
                    order.setSubtotal(order.getSubtotal().add(additionalAmount));
                    order.setTotalAmount(order.getTotalAmount().add(additionalAmount));
                    orderRepository.save(order);
                }
            }
        }
        
        log.info("Created {} trending orders", Arrays.stream(trendingPattern).sum());
    }
    */

    /*
    /**
     * T·∫°o Order v·ªõi th·ªùi gian t√πy ch·ªânh cho trending data
     */
    private Order createTrendingOrder(User customer, Address address, OrderStatus status, String orderType, long orderTime) {
        Order order = new Order();
        order.setUser(customer);
        order.setAddress(address);
        order.setOrderDate(orderTime); // S·ª≠ d·ª•ng th·ªùi gian t√πy ch·ªânh
        order.setSubtotal(BigDecimal.ZERO);
        order.setShippingFee(new BigDecimal("30000"));
        order.setDiscountAmount(BigDecimal.ZERO);
        order.setDiscountShipping(BigDecimal.ZERO);
        order.setTotalAmount(BigDecimal.ZERO);
        order.setOrderStatus(status);
        order.setOrderType(orderType);
        order.setCode("TRD" + orderTime + "_" + customer.getId()); // Code kh√°c ƒë·ªÉ ph√¢n bi·ªát
        order.setCreatedBy(customer.getId());
        order.setCreatedAt(orderTime);
        order.setUpdatedAt(orderTime);
        order.setStatus((byte) 1);
        return order;
    }
    // ============== END DISABLED ORDER METHODS ==============

    /**
     * ‚úÖ TH√äM METHOD: T·∫°o th√™m review ƒë·ªÉ c√≥ ƒë√°nh gi√° cho trending products
     */
    private void initializeTrendingReviewData() {
        log.info("Initializing trending review data...");

        List<User> customers = userRepository.findByRole_RoleName(RoleName.CUSTOMER);
        List<Book> books = bookRepository.findAll();

        if (customers.isEmpty() || books.isEmpty()) {
            log.warn("Not enough data to create trending reviews");
            return;
        }

        long currentTime = System.currentTimeMillis();
        long thirtyDaysAgo = currentTime - (30L * 24 * 60 * 60 * 1000);

        String[] positiveComments = {
                "S√°ch tuy·ªát v·ªùi! R·∫•t h·ªØu √≠ch v√† hay.",
                "N·ªôi dung phong ph√∫, vi·∫øt r·∫•t d·ªÖ hi·ªÉu.",
                "ƒê√°ng ƒë·ªçc! T√¥i h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu.",
                "S√°ch ch·∫•t l∆∞·ª£ng cao, gi√° c·∫£ h·ª£p l√Ω.",
                "R·∫•t th√≠ch c√°ch t√°c gi·∫£ tr√¨nh b√†y.",
                "M·ªôt trong nh·ªØng cu·ªën s√°ch hay nh·∫•t t√¥i t·ª´ng ƒë·ªçc.",
                "N·ªôi dung s√¢u s·∫Øc v√† √Ω nghƒ©a.",
                "ƒê·ªçc xong c√≥ c·∫£m gi√°c r·∫•t th·ªèa m√£n.",
                "S√°ch ƒë∆∞·ª£c vi·∫øt r·∫•t t√¢m huy·∫øt v√† ch·∫•t l∆∞·ª£ng.",
                "Recommend cho m·ªçi ng∆∞·ªùi ƒë·ªçc!"
        };

        String[] neutralComments = {
                "S√°ch b√¨nh th∆∞·ªùng, c√≥ th·ªÉ ƒë·ªçc.",
                "N·ªôi dung ·ªïn, ph√π h·ª£p v·ªõi m·ªôt s·ªë ng∆∞·ªùi.",
                "Kh√¥ng qu√° hay nh∆∞ng c≈©ng kh√¥ng t·ªá.",
                "C√≥ nh·ªØng ph·∫ßn hay, c√≥ nh·ªØng ph·∫ßn ch∆∞a th·ª±c s·ª± ·∫•n t∆∞·ª£ng."
        };

        // T·∫°o review cho c√°c s√°ch v·ªõi pattern kh√°c nhau
        int[] reviewPattern = {25, 20, 18, 15, 12, 10, 8, 6, 4, 3}; // S·ªë review cho t·ª´ng s√°ch
        double[] ratingPattern = {4.8, 4.6, 4.5, 4.3, 4.2, 4.0, 3.8, 3.5, 3.2, 3.0}; // Rating trung b√¨nh

        for (int bookIndex = 0; bookIndex < Math.min(books.size(), reviewPattern.length); bookIndex++) {
            Book book = books.get(bookIndex);
            int reviewCount = reviewPattern[bookIndex];
            double avgRating = ratingPattern[bookIndex];

            for (int reviewIndex = 0; reviewIndex < reviewCount; reviewIndex++) {
                User customer = customers.get(reviewIndex % customers.size());

                // T·∫°o rating xung quanh average rating
                int rating;
                if (avgRating >= 4.5) {
                    rating = (Math.random() < 0.8) ? 5 : 4; // 80% rating 5, 20% rating 4
                } else if (avgRating >= 4.0) {
                    rating = (Math.random() < 0.6) ? 5 : ((Math.random() < 0.8) ? 4 : 3); // 60% rating 5, 20% rating 4, 20% rating 3
                } else if (avgRating >= 3.5) {
                    rating = (Math.random() < 0.4) ? 4 : ((Math.random() < 0.7) ? 3 : 2); // 40% rating 4, 30% rating 3, 30% rating 2
                } else {
                    rating = (Math.random() < 0.3) ? 4 : ((Math.random() < 0.6) ? 3 : 2); // 30% rating 4, 30% rating 3, 40% rating 2
                }

                // Ch·ªçn comment ph√π h·ª£p v·ªõi rating v√† x√°c ƒë·ªãnh isPositive
                String comment;
                Boolean isPositive;
                if (rating >= 4) {
                    comment = positiveComments[(int) (Math.random() * positiveComments.length)];
                    isPositive = true; // Rating >= 4 ƒë∆∞·ª£c coi l√† t√≠ch c·ª±c
                } else if (rating == 3) {
                    comment = neutralComments[(int) (Math.random() * neutralComments.length)];
                    isPositive = Math.random() < 0.5 ? true : false; // Rating 3 c√≥ th·ªÉ t√≠ch c·ª±c ho·∫∑c ti√™u c·ª±c
                } else {
                    comment = neutralComments[(int) (Math.random() * neutralComments.length)];
                    isPositive = false; // Rating <= 2 ƒë∆∞·ª£c coi l√† ti√™u c·ª±c
                }

                // Random th·ªùi gian review trong 30 ng√†y qua
                long reviewTime = thirtyDaysAgo + (long) (Math.random() * (currentTime - thirtyDaysAgo));

                Review review = Review.builder()
                        .book(book)
                        .user(customer)
                        .rating(rating)
                        .comment(comment)
                        .isPositive(isPositive) // ‚úÖ TH√äM: Thi·∫øt l·∫≠p isPositive
                        .reviewDate(reviewTime)
                        .reviewStatus(ReviewStatus.APPROVED)
                        .createdAt(reviewTime)
                        .updatedAt(reviewTime)
                        .build();
                reviewRepository.save(review);
            }
        }

        log.info("Created {} trending reviews", Arrays.stream(reviewPattern).sum());
    }


    // ============== DISABLED TEST ORDER METHODS ==============
    /*
    /**
     * ‚úÖ TH√äM METHOD: T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng test theo th·ªùi gian cho L√™ VƒÉn C 
     * Mua s√°ch "ƒê·∫Øc Nh√¢n T√¢m" t·ª´ 2023 ƒë·∫øn nay v·ªõi t·∫ßn su·∫•t kh√°c nhau
     */
    /*
    private void initializeTestOrdersForLeVanC() {
        log.info("Initializing test orders for L√™ VƒÉn C with time-based data...");
        
        // T√¨m user L√™ VƒÉn C
        User leVanC = userRepository.findByEmail("customer1@gmail.com").orElse(null);
        if (leVanC == null) {
            log.warn("L√™ VƒÉn C not found, skipping test order creation");
            return;
        }
        
        // T√¨m s√°ch "ƒê·∫Øc Nh√¢n T√¢m"
        Book dacNhanTam = bookRepository.findAll().stream()
                .filter(book -> book.getBookName().contains("ƒê·∫Øc Nh√¢n T√¢m"))
                .findFirst().orElse(null);
        if (dacNhanTam == null) {
            log.warn("Book 'ƒê·∫Øc Nh√¢n T√¢m' not found, skipping test order creation");
            return;
        }
        
        // T√¨m ƒë·ªãa ch·ªâ c·ªßa L√™ VƒÉn C
        Address address = addressRepository.findAll().stream()
                .filter(addr -> addr.getUser().equals(leVanC))
                .findFirst().orElse(null);
        if (address == null) {
            log.warn("Address for L√™ VƒÉn C not found, skipping test order creation");
            return;
        }
        
        long currentTime = System.currentTimeMillis();
        long oneDay = 24L * 60 * 60 * 1000;
        long oneMonth = 30L * oneDay;
        long oneYear = 365L * oneDay;
        
        // Pattern: T·∫°o ƒë∆°n h√†ng theo c√°c m·ªëc th·ªùi gian kh√°c nhau
        List<OrderTestData> orderPattern = Arrays.asList(
            // === 2023 - √çt ƒë∆°n h√†ng ===
            new OrderTestData(currentTime - oneYear - 6 * oneMonth, 1), // Th√°ng 2/2023
            new OrderTestData(currentTime - oneYear - 3 * oneMonth, 1), // Th√°ng 5/2023  
            new OrderTestData(currentTime - oneYear - oneMonth, 2),     // Th√°ng 7/2023
            new OrderTestData(currentTime - oneYear, 1),               // Th√°ng 8/2023
            
            // === Q4/2023 - TƒÉng d·∫ßn ===
            new OrderTestData(currentTime - oneYear + oneMonth, 2),    // Th√°ng 9/2023
            new OrderTestData(currentTime - oneYear + 2 * oneMonth, 3), // Th√°ng 10/2023
            new OrderTestData(currentTime - oneYear + 3 * oneMonth, 2), // Th√°ng 11/2023
            new OrderTestData(currentTime - oneYear + 4 * oneMonth, 4), // Th√°ng 12/2023
            
            // === Q1/2024 - Kh√° t·ªët ===
            new OrderTestData(currentTime - 7 * oneMonth, 3),          // Th√°ng 1/2024
            new OrderTestData(currentTime - 6 * oneMonth, 4),          // Th√°ng 2/2024  
            new OrderTestData(currentTime - 5 * oneMonth, 5),          // Th√°ng 3/2024
            
            // === Q2/2024 - Gi·∫£m ===
            new OrderTestData(currentTime - 4 * oneMonth, 2),          // Th√°ng 4/2024
            new OrderTestData(currentTime - 3 * oneMonth, 1),          // Th√°ng 5/2024
            new OrderTestData(currentTime - 2 * oneMonth, 3),          // Th√°ng 6/2024
            
            // === Q3/2024 (Th√°ng 7) - TƒÉng m·∫°nh ===
            new OrderTestData(currentTime - oneMonth, 8),              // Th√°ng 7/2024
            
            // === 1 tu·∫ßn g·∫ßn ƒë√¢y - Mua r·∫•t nhi·ªÅu ===
            new OrderTestData(currentTime - 6 * oneDay, 3),           // 6 ng√†y tr∆∞·ªõc
            new OrderTestData(currentTime - 5 * oneDay, 2),           // 5 ng√†y tr∆∞·ªõc
            new OrderTestData(currentTime - 4 * oneDay, 4),           // 4 ng√†y tr∆∞·ªõc  
            new OrderTestData(currentTime - 3 * oneDay, 1),           // 3 ng√†y tr∆∞·ªõc
            new OrderTestData(currentTime - 2 * oneDay, 5),           // 2 ng√†y tr∆∞·ªõc
            new OrderTestData(currentTime - oneDay, 3),               // 1 ng√†y tr∆∞·ªõc
            new OrderTestData(currentTime, 2)                        // H√¥m nay
        );
        
        int totalOrders = 0;
        
        // T·∫°o ƒë∆°n h√†ng theo pattern
        for (OrderTestData testData : orderPattern) {
            for (int i = 0; i < testData.orderCount; i++) {
                // Th√™m random offset ƒë·ªÉ ƒë∆°n h√†ng kh√¥ng b·ªã tr√πng timestamp
                long randomOffset = (long) (Math.random() * 2 * 60 * 60 * 1000); // Random 0-2 gi·ªù
                long orderTime = testData.timestamp + randomOffset;
                
                // T·∫°o ƒë∆°n h√†ng
                Order order = createTestOrder(leVanC, address, OrderStatus.DELIVERED, "ONLINE", orderTime);
                orderRepository.save(order);
                
                // T·∫°o order detail cho s√°ch ƒê·∫Øc Nh√¢n T√¢m
                int quantity = 1 + (int) (Math.random() * 2); // Mua 1-2 cu·ªën
                OrderDetail detail = createOrderDetail(order, dacNhanTam, quantity, dacNhanTam.getPrice());
                orderDetailRepository.save(detail);
                
                // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
                BigDecimal subtotal = dacNhanTam.getPrice().multiply(BigDecimal.valueOf(quantity));
                order.setSubtotal(subtotal);
                order.setTotalAmount(subtotal.add(order.getShippingFee()));
                orderRepository.save(order);
                
                totalOrders++;
            }
        }
        
        log.info("Created {} test orders for L√™ VƒÉn C spanning from 2023 to present", totalOrders);
        log.info("Orders distributed across different quarters and months for testing");
        log.info("Recent week has the most orders, previous month has good amount");
    }
    */
    
    /*
    /**
     * T·∫°o Order v·ªõi th·ªùi gian t√πy ch·ªânh cho test data
     */
    /*
    private Order createTestOrder(User customer, Address address, OrderStatus status, String orderType, long orderTime) {
        Order order = new Order();
        order.setUser(customer);
        order.setAddress(address);
        order.setOrderDate(orderTime); // S·ª≠ d·ª•ng th·ªùi gian t√πy ch·ªânh
        order.setSubtotal(BigDecimal.ZERO);
        order.setShippingFee(new BigDecimal("30000"));
        order.setDiscountAmount(BigDecimal.ZERO);
        order.setDiscountShipping(BigDecimal.ZERO);
        order.setTotalAmount(BigDecimal.ZERO);
        order.setOrderStatus(status);
        order.setOrderType(orderType);
        order.setCode("TEST" + System.currentTimeMillis() + "_" + Math.random());
        order.setCreatedBy(customer.getId());
        order.setStatus((byte) 1);
        return order;
    }
    */

    // ===== üéÆ MINIGAME DATA INITIALIZATION =====

    /**
     * Kh·ªüi t·∫°o d·ªØ li·ªáu chi·∫øn d·ªãch minigame
     */
    private void initializeCampaigns() {
        log.info("Initializing minigame campaigns...");

        long currentTime = System.currentTimeMillis();
        long oneWeek = 7L * 24 * 60 * 60 * 1000;
        long oneMonth = 30L * 24 * 60 * 60 * 1000;

        List<Campaign> campaigns = Arrays.asList(
                createCampaign("üéÅ Chi·∫øn d·ªãch m·ªü h·ªôp th·∫ßn b√≠",
                        currentTime - oneWeek, currentTime + oneMonth,
                        3, 100, "Chi·∫øn d·ªãch m·ªü h·ªôp v·ªõi nhi·ªÅu ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n!"),
                createCampaign("üéÆ Event cu·ªëi tu·∫ßn",
                        currentTime, currentTime + (7 * 24 * 60 * 60 * 1000L),
                        5, 50, "Event ƒë·∫∑c bi·ªát cu·ªëi tu·∫ßn v·ªõi ph·∫ßn th∆∞·ªüng kh·ªßng!"),
                createCampaign("üí∞ SƒÉn voucher th√°ng 8",
                        currentTime + oneWeek, currentTime + (2 * oneMonth),
                        2, 200, "Chi·∫øn d·ªãch sƒÉn voucher v·ªõi t·ª∑ l·ªá tr√∫ng cao!")
        );
        campaignRepository.saveAll(campaigns);
        log.info("Created {} campaigns", campaigns.size());
    }

    private Campaign createCampaign(String name, Long startDate, Long endDate,
                                    Integer freeLimit, Integer pointCost, String description) {
        Campaign campaign = new Campaign();
        campaign.setName(name);
        campaign.setStartDate(startDate);
        campaign.setEndDate(endDate);
        campaign.setConfigFreeLimit(freeLimit);
        campaign.setConfigPointCost(pointCost);
        campaign.setDescription(description);
        campaign.setStatus((byte) 1);
        campaign.setCreatedAt(System.currentTimeMillis());
        campaign.setCreatedBy(1); // Admin
        return campaign;
    }

    /**
     * Kh·ªüi t·∫°o d·ªØ li·ªáu ph·∫ßn th∆∞·ªüng cho c√°c chi·∫øn d·ªãch
     */
    private void initializeRewards() {
        log.info("Initializing minigame rewards...");

        List<Campaign> campaigns = campaignRepository.findAll();
        if (campaigns.isEmpty()) {
            log.warn("No campaigns found, skipping reward initialization");
            return;
        }

        Campaign firstCampaign = campaigns.get(0); // L·∫•y campaign ƒë·∫ßu ti√™n
        List<Voucher> availableVouchers = voucherRepository.findAll();

        List<Reward> rewards = new java.util.ArrayList<>();

        // ‚úÖ FIX: C·∫≠p nh·∫≠t ƒë·ªÉ t·ªïng x√°c su·∫•t = 100%
        // 1. Ph·∫ßn th∆∞·ªüng "Kh√¥ng tr√∫ng g√¨" (65%)
        rewards.add(createReward(firstCampaign, "Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau", "Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng",
                RewardType.NONE, new java.math.BigDecimal("65.0"), null, null, null, 1000));

        // 2. Ph·∫ßn th∆∞·ªüng ƒëi·ªÉm (25% t·ªïng)
        rewards.add(createReward(firstCampaign, "Th∆∞·ªüng 50 ƒëi·ªÉm", "Nh·∫≠n 50 ƒëi·ªÉm mi·ªÖn ph√≠",
                RewardType.POINTS, new java.math.BigDecimal("15.0"), 50, null, null, 100));
        rewards.add(createReward(firstCampaign, "Th∆∞·ªüng 100 ƒëi·ªÉm", "Nh·∫≠n 100 ƒëi·ªÉm mi·ªÖn ph√≠",
                RewardType.POINTS, new java.math.BigDecimal("7.0"), 100, null, null, 50));
        rewards.add(createReward(firstCampaign, "Th∆∞·ªüng 500 ƒëi·ªÉm", "Nh·∫≠n 500 ƒëi·ªÉm si√™u kh·ªßng!",
                RewardType.POINTS, new java.math.BigDecimal("3.0"), 500, null, null, 20));

        // 3. Ph·∫ßn th∆∞·ªüng voucher (10% c√≤n l·∫°i)
        if (!availableVouchers.isEmpty()) {
            // Ch·ªâ t·∫°o 2 lo·∫°i voucher v·ªõi x√°c su·∫•t c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng = 100%
            if (availableVouchers.size() >= 1) {
                Voucher voucher1 = availableVouchers.get(0);
                rewards.add(createReward(firstCampaign, "Voucher " + voucher1.getName(),
                        "Tr√∫ng voucher " + voucher1.getName(),
                        RewardType.VOUCHER, new java.math.BigDecimal("7.0"),
                        null, voucher1, null, 30));
            }
            if (availableVouchers.size() >= 2) {
                Voucher voucher2 = availableVouchers.get(1);
                rewards.add(createReward(firstCampaign, "Voucher " + voucher2.getName(),
                        "Tr√∫ng voucher " + voucher2.getName(),
                        RewardType.VOUCHER, new java.math.BigDecimal("3.0"),
                        null, voucher2, null, 15));
            }
        }
        // T·ªïng: 65% + 15% + 7% + 3% + 7% + 3% = 100% ‚úÖ

        rewardRepository.saveAll(rewards);
        log.info("Created {} rewards for campaign {}", rewards.size(), firstCampaign.getName());
    }

    private Reward createReward(Campaign campaign, String name, String description,
                                RewardType type, java.math.BigDecimal probability,
                                Integer pointValue, Voucher voucher, Integer voucherId,
                                Integer quantity) {
        Reward reward = new Reward();
        reward.setCampaign(campaign);
        reward.setName(name);
        reward.setDescription(description);
        reward.setType(type);
        reward.setProbability(probability);
        reward.setPointValue(pointValue);
        reward.setVoucher(voucher);
        // Note: voucherId parameter not used because Reward entity doesn't have voucherId field
        reward.setStock(quantity);
        reward.setStatus((byte) 1);
        reward.setCreatedAt(System.currentTimeMillis());
        reward.setCreatedBy(1); // Admin
        return reward;
    }

    /**
     * Helper class cho test data pattern
     */
    private static class OrderTestData {
        long timestamp;
        int orderCount;

        OrderTestData(long timestamp, int orderCount) {
            this.timestamp = timestamp;
            this.orderCount = orderCount;
        }
    }
}
