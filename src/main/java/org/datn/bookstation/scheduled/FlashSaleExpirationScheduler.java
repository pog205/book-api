package org.datn.bookstation.scheduled;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.datn.bookstation.service.FlashSaleService;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Set;
import java.util.HashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledFuture;

/**
 * üî• FLASH SALE EXPIRATION SCHEDULER (DYNAMIC + BATCH)
 * T·ª± ƒë·ªông schedule task t·∫°i th·ªùi ƒëi·ªÉm flash sale k·∫øt th√∫c
 * H·ªó tr·ª£ batch processing cho nhi·ªÅu flash sales c√πng expire 1 l√∫c
 * 
 * ‚úÖ NEW LOGIC: Kh√¥ng set null flashSaleItemId trong cart item n·ªØa
 * - Ch·ªâ update status c·ªßa FlashSaleItem t·ª´ 1 -> 0 khi h·∫øt h·∫°n
 * - Cart item gi·ªØ nguy√™n flashSaleItemId, nh∆∞ng tr·∫£ v·ªÅ gi√° g·ªëc khi status = 0
 * 
 * Approach: Event-driven scheduling v·ªõi batch processing
 * - Khi t·∫°o flash sale: group theo endTime
 * - Khi endTime ƒë·∫øn: x·ª≠ l√Ω batch t·∫•t c·∫£ flash sales c√πng expire
 * - Efficient: 1 task cho nhi·ªÅu flash sales c√πng th·ªùi ƒëi·ªÉm
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class FlashSaleExpirationScheduler {
    
    private final FlashSaleService flashSaleService;
    private final TaskScheduler taskScheduler;
    
    // Map theo th·ªùi ƒëi·ªÉm expiration: timestamp -> Set<flashSaleIds>
    private final ConcurrentHashMap<Long, Set<Integer>> flashSalesByTime = new ConcurrentHashMap<>();
    // Map theo th·ªùi ƒëi·ªÉm expiration: timestamp -> ScheduledTask
    private final ConcurrentHashMap<Long, ScheduledFuture<?>> scheduledTasksByTime = new ConcurrentHashMap<>();
    
    /**
     * Schedule m·ªôt task ƒë·ªÉ x·ª≠ l√Ω flash sale h·∫øt h·∫°n t·∫°i th·ªùi ƒëi·ªÉm c·ª• th·ªÉ
     * H·ªó tr·ª£ batch processing cho nhi·ªÅu flash sales c√πng expire
     * 
     * @param flashSaleId ID c·ªßa flash sale
     * @param endTime Th·ªùi gian k·∫øt th√∫c flash sale (timestamp)
     */
    public void scheduleFlashSaleExpiration(Integer flashSaleId, Long endTime) {
        try {
            // Normalize timestamp ƒë·ªÉ group c√°c flash sales c√πng th·ªùi ƒëi·ªÉm
            // Round to nearest minute ƒë·ªÉ tr√°nh t·∫°o qu√° nhi·ªÅu tasks
            long normalizedTime = (endTime / 60000) * 60000; // Round to minute
            
            synchronized (this) {
                // Add flash sale v√†o group theo th·ªùi gian
                flashSalesByTime.computeIfAbsent(normalizedTime, k -> new HashSet<>()).add(flashSaleId);
                
                // N·∫øu ch∆∞a c√≥ task cho th·ªùi ƒëi·ªÉm n√†y, t·∫°o m·ªõi
                if (!scheduledTasksByTime.containsKey(normalizedTime)) {
                    ScheduledFuture<?> task = taskScheduler.schedule(
                        () -> handleBatchFlashSaleExpiration(normalizedTime),
                        Instant.ofEpochMilli(normalizedTime)
                    );
                    
                    scheduledTasksByTime.put(normalizedTime, task);
                    
                    LocalDateTime expireDateTime = LocalDateTime.ofInstant(
                        Instant.ofEpochMilli(normalizedTime), ZoneId.systemDefault());
                    log.info("üî• SCHEDULED: Batch task for time {} with flash sale {}", expireDateTime, flashSaleId);
                } else {
                    log.info("üî• GROUPED: Added flash sale {} to existing batch at time {}", 
                        flashSaleId, LocalDateTime.ofInstant(Instant.ofEpochMilli(normalizedTime), ZoneId.systemDefault()));
                }
            }
            
        } catch (Exception e) {
            log.error("üî• ERROR: Failed to schedule expiration for flash sale {}", flashSaleId, e);
        }
    }
    
    /**
     * X·ª≠ l√Ω batch flash sales h·∫øt h·∫°n c√πng th·ªùi ƒëi·ªÉm
     * Method n√†y ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông khi ƒë·∫øn th·ªùi gian endTime
     */
    private void handleBatchFlashSaleExpiration(Long normalizedTime) {
        try {
            Set<Integer> expiredFlashSales = flashSalesByTime.get(normalizedTime);
            if (expiredFlashSales == null || expiredFlashSales.isEmpty()) {
                log.warn("üî• WARNING: No flash sales found for time {}", normalizedTime);
                return;
            }
            
            log.info("üî• BATCH EXPIRATION: Processing {} flash sales expiring at {}", 
                expiredFlashSales.size(), 
                LocalDateTime.ofInstant(Instant.ofEpochMilli(normalizedTime), ZoneId.systemDefault()));
            
            // ‚úÖ NEW LOGIC: Update status c·ªßa FlashSaleItem thay v√¨ set null cart item
            int totalUpdatedItems = 0;
            for (Integer flashSaleId : expiredFlashSales) {
                try {
                    int updatedCount = flashSaleService.autoUpdateFlashSaleItemsStatus(flashSaleId);
                    totalUpdatedItems += updatedCount;
                    log.info("üî• EXPIRATION: Updated {} flash sale items status for flash sale {}", updatedCount, flashSaleId);
                } catch (Exception e) {
                    log.error("üî• ERROR: Failed to update status for flash sale {}: {}", flashSaleId, e.getMessage());
                }
            }
            
            if (totalUpdatedItems > 0) {
                log.info("üî• BATCH EXPIRATION: Updated {} flash sale items status for {} expired flash sales", 
                        totalUpdatedItems, expiredFlashSales.size());
            }
            
            // Cleanup
            flashSalesByTime.remove(normalizedTime);
            scheduledTasksByTime.remove(normalizedTime);
            
            log.info("üî• BATCH EXPIRATION: Completed processing {} flash sales", expiredFlashSales.size());
            
        } catch (Exception e) {
            log.error("üî• ERROR: Error processing batch expiration for time {}", normalizedTime, e);
        }
    }
    
    /**
     * Cancel scheduled task cho flash sale (khi admin cancel/update flash sale)
     * V·ªõi batch approach, c·∫ßn remove kh·ªèi group thay v√¨ cancel individual task
     */
    public void cancelScheduledTask(Integer flashSaleId) {
        synchronized (this) {
            // T√¨m flash sale trong c√°c groups v√† remove
            for (var entry : flashSalesByTime.entrySet()) {
                Set<Integer> flashSales = entry.getValue();
                if (flashSales.remove(flashSaleId)) {
                    log.info("üî• CANCELLED: Removed flash sale {} from batch", flashSaleId);
                    
                    // N·∫øu group tr·ªëng, cancel task v√† remove
                    if (flashSales.isEmpty()) {
                        Long timeKey = entry.getKey();
                        ScheduledFuture<?> task = scheduledTasksByTime.get(timeKey);
                        if (task != null && !task.isDone()) {
                            task.cancel(false);
                            scheduledTasksByTime.remove(timeKey);
                            flashSalesByTime.remove(timeKey);
                            log.info("üî• CANCELLED: Cancelled empty batch task for time {}", timeKey);
                        }
                    }
                    break;
                }
            }
        }
    }
    
    /**
     * Cleanup task ch·∫°y h√†ng ng√†y ƒë·ªÉ d·ªçn d·∫πp completed tasks
     * Ch·ªâ ƒë·ªÉ maintenance, kh√¥ng ph·∫£i core logic
     */
    @Scheduled(cron = "0 0 2 * * *") // 2 AM m·ªói ng√†y
    public void cleanupCompletedTasks() {
        try {
            log.info("üî• MAINTENANCE: Starting cleanup of completed tasks...");
            
            int removedCount = 0;
            synchronized (this) {
                for (var entry : scheduledTasksByTime.entrySet()) {
                    if (entry.getValue().isDone()) {
                        flashSalesByTime.remove(entry.getKey());
                        scheduledTasksByTime.remove(entry.getKey());
                        removedCount++;
                    }
                }
            }
            
            if (removedCount > 0) {
                log.info("üî• MAINTENANCE: Cleaned up {} completed tasks", removedCount);
            }
            
            log.info("üî• MAINTENANCE: Active scheduled tasks: {}, Flash sale groups: {}", 
                scheduledTasksByTime.size(), flashSalesByTime.size());
            
        } catch (Exception e) {
            log.error("üî• ERROR: Error during cleanup", e);
        }
    }
    
    /**
     * üîÑ SCHEDULED: Ki·ªÉm tra v√† c·∫≠p nh·∫≠t status ƒë·ªãnh k·ª≥ d·ª±a tr√™n th·ªùi gian hi·ªáu l·ª±c
     * Logic: 
     * - N·∫øu startTime <= currentTime <= endTime ‚Üí status = 1 (c√≥ hi·ªáu l·ª±c)
     * - N·∫øu currentTime < startTime ho·∫∑c currentTime > endTime ‚Üí status = 0 (kh√¥ng hi·ªáu l·ª±c)
     * 
     * Ch·∫°y m·ªói 30 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o real-time status update
     */
    @Scheduled(fixedDelay = 30000) // M·ªói 30 gi√¢y
    public void scheduleStatusValidation() {
        try {
            log.info("üîÑ SCHEDULED: Starting status validation for all flash sale items...");
            
            int updatedCount = flashSaleService.autoUpdateFlashSaleItemsStatus();
            
            if (updatedCount > 0) {
                log.info("üîÑ SCHEDULED: Updated {} flash sale items status based on validity time", updatedCount);
            } else {
                log.debug("üîÑ SCHEDULED: No flash sale items need status update");
            }
            
        } catch (Exception e) {
            log.error("üîÑ ERROR: Failed to execute scheduled status validation", e);
        }
    }
}
